<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Mining Twitter Data For Research</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<meta name="title" content="Mining Twitter Data For Research"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="January, 2013"/>
<meta name="author" content="Alex Storer"/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style><link rel="stylesheet"
                     href="css/worg.css"
                     type="text/css"/>
<link rel="stylesheet" type="text/css" href="org/css/worg.css" />
<script type="text/javascript" src="http://orgmode.org/org-info.js">
/**
 *
 * @source: http://orgmode.org/org-info.js
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in http://orgmode.org/org-info.js.
 *
 * Copyright (C) 2012-2013  Sebastian Rose
 *
 *
 * The JavaScript code in this tag is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in http://orgmode.org/org-info.js.
 *
 */
</script>

<script type="text/javascript">

/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/

<!--/*--><![CDATA[/*><!--*/
org_html_manager.set("TOC_DEPTH", "3");
org_html_manager.set("LINK_HOME", "");
org_html_manager.set("LINK_UP", "");
org_html_manager.set("LOCAL_TOC", "1");
org_html_manager.set("VIEW_BUTTONS", "0");
org_html_manager.set("MOUSE_HINT", "underline");
org_html_manager.set("FIXED_TOC", "0");
org_html_manager.set("TOC", "1");
org_html_manager.set("VIEW", "info");
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
</script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>

</head>
<body>

<div id="preamble">

</div>

<div id="content">
<h1 class="title">Mining Twitter Data For Research</h1>





<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Goals</a>
<ul>
<li><a href="#sec-1-1">1.1 Who am I?</a></li>
<li><a href="#sec-1-2">1.2 What is this page?</a></li>
</ul>
</li>
<li><a href="#sec-2">2 Basic Python</a>
<ul>
<li><a href="#sec-2-1">2.1 Installation</a>
<ul>
<li><a href="#sec-2-1-1">2.1.1 IDE</a></li>
<li><a href="#sec-2-1-2">2.1.2 Wing IDE 101</a></li>
</ul>
</li>
<li><a href="#sec-2-2">2.2 Further Python Resources</a></li>
<li><a href="#sec-2-3">2.3 Diving In</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1 Basic Text Handling</a></li>
<li><a href="#sec-2-3-2">2.3.2 Indexing and Slicing</a></li>
<li><a href="#sec-2-3-3">2.3.3 Including Other Packages</a></li>
<li><a href="#sec-2-3-4">2.3.4 Objects and methods</a></li>
<li><a href="#sec-2-3-5">2.3.5 Defining Functions</a></li>
<li><a href="#sec-2-3-6">2.3.6 Logical Flow</a></li>
<li><a href="#sec-2-3-7">2.3.7 Review</a></li>
</ul>
</li>
<li><a href="#sec-2-4">2.4 For Loops</a>
<ul>
<li><a href="#sec-2-4-1">2.4.1 Example</a></li>
</ul>
</li>
<li><a href="#sec-2-5">2.5 Lists</a></li>
<li><a href="#sec-2-6">2.6 Exercise</a>
<ul>
<li><a href="#sec-2-6-1">2.6.1 Exercise Solutions</a></li>
</ul>
</li>
<li><a href="#sec-2-7">2.7 <code>dict</code> type</a>
<ul>
<li><a href="#sec-2-7-1">2.7.1 Examples</a></li>
<li><a href="#sec-2-7-2">2.7.2 Writing to CSV</a></li>
<li><a href="#sec-2-7-3">2.7.3 A Note on File Objects</a></li>
<li><a href="#sec-2-7-4">2.7.4 Exercise</a></li>
<li><a href="#sec-2-7-5">2.7.5 Exercise Solutions</a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-3">3 Aspects of Twitter</a>
<ul>
<li><a href="#sec-3-1">3.1 Anatomy of a Tweet</a>
<ul>
<li><a href="#sec-3-1-1">3.1.1 This is a tweet</a></li>
<li><a href="#sec-3-1-2">3.1.2 More information</a></li>
</ul>
</li>
<li><a href="#sec-3-2">3.2 Anatomy of a Twitter User</a></li>
<li><a href="#sec-3-3">3.3 How Twitter has changed</a></li>
<li><a href="#sec-3-4">3.4 APIs</a>
<ul>
<li><a href="#sec-3-4-1">3.4.1 Twitter API</a></li>
<li><a href="#sec-3-4-2">3.4.2 Limitations of Twitter API</a></li>
<li><a href="#sec-3-4-3">3.4.3 JSON and API searches</a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-4">4 Getting Data</a>
<ul>
<li><a href="#sec-4-1">4.1 Getting Started on Twitter</a>
<ul>
<li><a href="#sec-4-1-1">4.1.1 Getting set-up in Python</a></li>
<li><a href="#sec-4-1-2">4.1.2 API Limitations</a></li>
<li><a href="#sec-4-1-3">4.1.3 Handling Limitations</a></li>
<li><a href="#sec-4-1-4">4.1.4 The "OAuth Dance"</a></li>
<li><a href="#sec-4-1-5">4.1.5 Our first API Call</a></li>
</ul>
</li>
<li><a href="#sec-4-2">4.2 Search API</a>
<ul>
<li><a href="#sec-4-2-1">4.2.1 Search API Usage</a></li>
<li><a href="#sec-4-2-2">4.2.2 Gnip and other services</a></li>
</ul>
</li>
<li><a href="#sec-4-3">4.3 Streaming API</a>
<ul>
<li><a href="#sec-4-3-1">4.3.1 Real-time search for "Obama"</a></li>
</ul>
</li>
<li><a href="#sec-4-4">4.4 User graphs</a>
<ul>
<li><a href="#sec-4-4-1">4.4.1 Basic Idea</a></li>
<li><a href="#sec-4-4-2">4.4.2 Overview: The Details</a></li>
<li><a href="#sec-4-4-3">4.4.3 Getting a user and all their friends and followers</a></li>
<li><a href="#sec-4-4-4">4.4.4 Getting a user</a></li>
<li><a href="#sec-4-4-5">4.4.5 Actually getting the information</a></li>
<li><a href="#sec-4-4-6">4.4.6 Error Handling</a></li>
<li><a href="#sec-4-4-7">4.4.7 Waiting</a></li>
<li><a href="#sec-4-4-8">4.4.8 The Entire Script</a></li>
<li><a href="#sec-4-4-9">4.4.9 Pitfalls</a></li>
<li><a href="#sec-4-4-10">4.4.10 Processing the Results</a></li>
<li><a href="#sec-4-4-11">4.4.11 Script for processing</a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-5">5 Analyzing Data</a>
<ul>
<li><a href="#sec-5-1">5.1 Using R to make graphs</a>
<ul>
<li><a href="#sec-5-1-1">5.1.1 The <code>igraph</code> package</a></li>
<li><a href="#sec-5-1-2">5.1.2 Dangers</a></li>
</ul>
</li>
<li><a href="#sec-5-2">5.2 Basic Text Analysis</a></li>
<li><a href="#sec-5-3">5.3 Tools for Text Analysis in R</a></li>
<li><a href="#sec-5-4">5.4 Word correlation</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Goals</h2>
<div class="outline-text-2" id="text-1">

<ul class="org-ul">
<li>Get a working python environment installed on your own computer
</li>
<li>Make python seem less scary
</li>
<li>Understand the basics of Twitter and how data can be obtained from Twitter
</li>
<li>Give a sense of how to ask research questions using Twitter
</li>
<li>Lay the groundwork so you can do further work on your own
</li>
</ul>


<p>
A lot of what we're doing is covered in more detail in Matthew A. Russel's book <a href="http://www.amazon.com/Mining-Social-Web-Analyzing-Facebook/dp/1449388345">Mining the Social Web</a>.
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Who am I?</h3>
<div class="outline-text-3" id="text-1-1">


<p>
My name is Alex Storer, and I'm part of the <a href="http://dss.iq.harvard.edu">Data Science Services</a> team at IQSS.  I have a PhD in Computational Neuroscience,
and have done a lot of programming and scripting to interact with
data.
</p>
<p>
Our team can help you with your research questions, both with the
statistics and the technology.  If you want to chat with us, simply
e-mail <a href="#support-help.hmdc.harvard.edu">support@help.hmdc.harvard.edu</a>.
</p>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> What is this page?</h3>
<div class="outline-text-3" id="text-1-2">


<p>
This is a tutorial that I wrote using the org-mode in emacs.  It is
hosted here:
</p>
<p>
<a href="http://www.people.fas.harvard.edu/~astorer/twitter/">http://www.people.fas.harvard.edu/~astorer/twitter/</a>
</p>
<p>
You can always find details about our ongoing workshops here:
</p>
<p>
<a href="http://dss.iq.harvard.edu">http://dss.iq.harvard.edu</a>
</p>
<p>
The code for this workshop is posted here:
</p>
<p>
<a href="https://github.com/alexstorer/twittersauce">https://github.com/alexstorer/twittersauce</a>
</p>
</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic Python</h2>
<div class="outline-text-2" id="text-2">

<p>Python is a powerful interpreted language that people often use for
basic scripting. This is by no means a
complete or thorough introduction to Python!  It's just enough to get
by.
</p>

</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Installation</h3>
<div class="outline-text-3" id="text-2-1">

<p>   Python comes in two modern flavors, version 2 and version 3.  There
   are some important language differences between them, and in
   practice, almost everyone uses version 2.  To install it, go <a href="http://python.org/download/">here</a>
   and select the relevant operating system.
</p>
</div>

<div id="outline-container-2-1-1" class="outline-4">
<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> IDE</h4>
<div class="outline-text-4" id="text-2-1-1">

<p>   An <b>IDE</b>, or Integrated Development Environment, is used to
   facilitate programming.  A good IDE does things like code
   highlighting, error checking, one-click-running, and easy
   integration across multiple files.  An example of a crappy IDE is
   notepad.  I like to use emacs.  Most people prefer something else.
</p></div>

</div>

<div id="outline-container-2-1-2" class="outline-4">
<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> Wing IDE 101</h4>
<div class="outline-text-4" id="text-2-1-2">

<p>    For this session, I recommend <a href="http://wingware.com/downloads/wingide-101">Wing 101</a>.  It's a free version of a
    more fully-featured IDE, but for beginners, it's perfect.  If you
    don't already have an IDE that you're invested in, or you want
    your intro to python to be as painless as possible, you should
    install it.  It's cross platform.
</p><ul>
<li id="sec-2-1-2-1">Getting Started in Wing<br/>
     Once you have Wing installed, you might want to use the tutorial
     to learn how to navigate around in it.


<div class="figure">
<p><img src="./img/tutorial.jpg" title="Wing Tutorial" align="center" alt="./img/tutorial.jpg" /></p>
<p>Opening the tutorial in Wing 101.</p>
</div>

</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Further Python Resources</h3>
<div class="outline-text-3" id="text-2-2">


<p>
   <b>But wait, I want to spend four months becoming a Python guru!</b>
</p>
<p>
   Dude, you're awesome.  Here are some resources that will help you:
</p>
<ul class="org-ul">
<li><a href="http://knuth.luther.edu/~leekent/IntroToComputing/">Python Programming Fundamentals</a>
     Uses WingIDE to teach basic computer science tactics using python
</li>
<li><a href="http://www.pythonchallenge.com/">Python Challenge</a>
     A fun programming riddle that will increase your chops.
</li>
<li><a href="http://learnpythonthehardway.org/">Learn Python The Hard Way</a>
     The Hard Way means by actually writing code.  Maybe it should be
     called The Good Way?
</li>
</ul>


</div>

</div>

<div id="outline-container-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Diving In</h3>
<div class="outline-text-3" id="text-2-3">

<p>   In Wing, there is a window open called <b>Python Shell</b>   
</p><ul class="org-ul">
<li>If you know <b>R</b>, think of this just like the R command line
</li>
<li>If you've never programmed before, think of this as a graphing calculator
</li>
</ul>




<pre class="src src-python"><span style="color: #728a05;">print</span> 2+4
</pre>


<pre class="example">
6
</pre>



</div>

<div id="outline-container-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> Basic Text Handling</h4>
<div class="outline-text-4" id="text-2-3-1">

<ul class="org-ul">
<li>Of course, this graphing calculator can handle text, too!
</li>
</ul>




<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"Hello, World!"</span>
<span style="color: #728a05;">print</span> mystr
<span style="color: #728a05;">print</span> <span style="color: #728a05;">len</span>(mystr)
</pre>


<pre class="example">
Hello, World!
13
</pre>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<tbody>
<tr><td class="left"><b>Python Code</b></td><td class="left"><b>R Code</b></td><td class="left"><b>English Translation</b></td></tr>
<tr><td class="left"><code>print 2+4</code></td><td class="left"><code>print(2+4)</code></td><td class="left">Print the value of 2+4</td></tr>
<tr><td class="left"><code>mystr = '`Hello World'`</code></td><td class="left"><code>mystr &lt;- '`Hello World'`</code></td><td class="left">Assign the string "Hello World" to the variable mystr</td></tr>
<tr><td class="left"><code>len(mystr)</code></td><td class="left"><code>nchar(mystr)</code></td><td class="left">How "long" is the variable mystr?  <i>Note: R can tell you how long it is, but if you want the number of characters, that's what you need to ask for.</i></td></tr>
</tbody>
</table>


<p>
<b>Note to Stata Users:</b><br/>
Assigning a variable is not the same as adding a "column" to your dataset.
</p>
</div>

</div>

<div id="outline-container-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> Indexing and Slicing</h4>
<div class="outline-text-4" id="text-2-3-2">

<p>Get the first element of a string.
</p>
<ul class="org-ul">
<li><b>Note:</b> Python counts from 0.  This is a common convention in most
  languages constructed by computer scientists.
</li>
</ul>





<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"Dogs in outer space"</span>
<span style="color: #728a05;">print</span> mystr[0]
</pre>


<pre class="example">
D
</pre>


<p>
Get the last element of a string
</p>


<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"Dogs in outer space"</span>
<span style="color: #728a05;">print</span> mystr[-1]
<span style="color: #728a05;">print</span> mystr[<span style="color: #728a05;">len</span>(mystr)-1]
</pre>


<pre class="example">
e
e
</pre>





<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"Dogs in outer space"</span>
<span style="color: #728a05;">print</span> mystr[1:3]
<span style="color: #728a05;">print</span> mystr[3:]
<span style="color: #728a05;">print</span> mystr[:-3]
</pre>


<pre class="example">
og
s in outer space
Dogs in outer sp
</pre>



</div>

</div>

<div id="outline-container-2-3-3" class="outline-4">
<h4 id="sec-2-3-3"><span class="section-number-4">2.3.3</span> Including Other Packages</h4>
<div class="outline-text-4" id="text-2-3-3">


<ul class="org-ul">
<li>By default, python doesn't include every possible "package"
<ul class="org-ul">
<li>This is similar to R, but unlike Matlab
</li>
<li>Use the <code>include</code> statement to load a library
</li>
</ul>

</li>
</ul>





<pre class="src src-python"><span style="color: #728a05;">import</span> math
<span style="color: #728a05;">print</span> math.sin(math.pi)
</pre>


<pre class="example">
1.22464679915e-16
</pre>


<p>
After we import from a package, we have to access sub-elements of that
package using the <code>.</code> operator.  Notice also that while the value
<code>1.22464679915e-16</code> is very nearly <code>0</code>, the <code>math</code> module doesn't know
that sin(&pi;) = 0.  There are smarter modules for doing math in
Python, like <code>scipy</code> and <code>numpy</code>.  Some people love using Python for
Math.  I think it makes more sense to use R.
</p>
<ul class="org-ul">
<li>If you want to <code>import</code> something into your namespace
<ul class="org-ul">
<li><code>from math import &lt;myfunction&gt;</code> <b>or</b>
</li>
<li><code>from math import *</code>
</li>
</ul>

</li>
</ul>





<pre class="src src-python"><span style="color: #728a05;">from</span> math <span style="color: #728a05;">import</span> *
<span style="color: #728a05;">print</span> sin(pi)
</pre>


<pre class="example">
1.22464679915e-16
</pre>


</div>

</div>

<div id="outline-container-2-3-4" class="outline-4">
<h4 id="sec-2-3-4"><span class="section-number-4">2.3.4</span> Objects and methods</h4>
<div class="outline-text-4" id="text-2-3-4">


<p>
Python makes extensive use of <b>objects</b>.  An object has
</p><ul class="org-ul">
<li>Methods: functions that work only on that option
</li>
<li>Fields: data that only that type of object has
</li>
</ul>


<p>
For example, let's imagine a <code>fruit</code> object.  A <code>fruit</code> might have a
field called <code>hasPeel</code>, which tells you whether this fruit is
peeled. It could also have a method called <code>peel</code>, which alters the
state of the fruit.
</p>



<pre class="src src-python"><span style="color: #728a05;">str</span> = <span style="color: #259185;">"THE World is A BIG and BEAUTIFUL place.  "</span>
<span style="color: #728a05;">print</span> <span style="color: #728a05;">str</span>.upper()
<span style="color: #2075c7;">name</span> = <span style="color: #259185;">"Alex Storer"</span>
<span style="color: #728a05;">print</span> name.swapcase()
</pre>


<pre class="example">
THE WORLD IS A BIG AND BEAUTIFUL PLACE.  
aLEX sTORER
</pre>


<p>
Here we defined two strings, <code>str</code> and <code>name</code>, and used these to
invoke string methods which affect the case of the string.
</p>
<ul class="org-ul">
<li>You can write your own objects and methods
</li>
<li>Objects can be sub-classes of other objects
<ul class="org-ul">
<li>e.g., a <code>psychologist</code> is a type of <code>researcher</code>, who does
    everything a <code>researcher</code> does but also some other things only
    a <code>pyschologist</code> does.
</li>
</ul>

</li>
</ul>


</div>

</div>

<div id="outline-container-2-3-5" class="outline-4">
<h4 id="sec-2-3-5"><span class="section-number-4">2.3.5</span> Defining Functions</h4>
<div class="outline-text-4" id="text-2-3-5">


<p>
You can write your own functions, pieces of code that can be used to
take specific inputs and give outputs.  You can create a function by
using the <code>def</code> command.
</p>



<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">square</span>(x):
    <span style="color: #728a05;">return</span> x*x
<span style="color: #728a05;">print</span> square(9)
</pre>


<pre class="example">
81
</pre>


<p>
Pay close attention to the <b>whitespace</b> that is used in Python!
Unlike other languages, it is not ignored.  Everything with the same
indentation is in the same level.  Above, the statement <code>return x*x</code>
is part of the <code>square</code> function, but the following line is outside of
the function definition.
</p>
</div>

</div>

<div id="outline-container-2-3-6" class="outline-4">
<h4 id="sec-2-3-6"><span class="section-number-4">2.3.6</span> Logical Flow</h4>
<div class="outline-text-4" id="text-2-3-6">


<div class="figure">
<p><img src="./img/decision-tree.png"  alt="./img/decision-tree.png" /></p>
<p>The xkcd guide to writing good code</p>
</div>

<p>
You can think about this logical process as being in pseudocode.
</p>
<pre class="example">
IF do things right
   ---&gt; code well
OTHERWISE
   ---&gt; do things fast
</pre>


<p>
A lot of programming is figuring out how to fit things into this sort
of <code>if=/=else</code> structure.  Let's look at an example in Python.
</p>
<ul class="org-ul">
<li>The method <code>find</code> returns the index of the first location of a
  string match
</li>
</ul>





<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"This is one cool looking string!"</span>
<span style="color: #728a05;">if</span> mystr.find(<span style="color: #259185;">"string"</span>)&gt;<span style="color: #728a05;">len</span>(mystr)/2:
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"The word 'string' is in the second half"</span>
<span style="color: #728a05;">else</span>:
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"The word 'string is not in the second half"</span>
</pre>


<pre class="example">
The word 'string' is in the second half
</pre>


<p>
What happens if the word "string" is not there at all?
</p>
<ul class="org-ul">
<li>The method <code>find</code> returns -1 if the string isn't found
</li>
</ul>





<pre class="src src-python"><span style="color: #2075c7;">mystr</span> = <span style="color: #259185;">"I don't know about you, but I only use velcro."</span>
<span style="color: #728a05;">print</span> mystr.find(<span style="color: #259185;">"string"</span>)
<span style="color: #728a05;">if</span> mystr.find(<span style="color: #259185;">"string"</span>)&gt;<span style="color: #728a05;">len</span>(mystr)/2:
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"The word 'string' is in the second half"</span>
<span style="color: #728a05;">elif</span> mystr.find(<span style="color: #259185;">"string"</span>)&gt;=0:
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"The word 'string is not in the second half"</span>
<span style="color: #728a05;">else</span>:
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"The word 'string' isn't there!"</span>
</pre>


<pre class="example">
-1
The word 'string' isn't there!
</pre>


<ul class="org-ul">
<li><b>Important Note:</b> In Python, most everything evaluates to <code>True</code>.
  Exceptions include <code>0</code> and <code>None</code>.  This means that you can say
  things like <code>if (result)</code> where the result may be a computation, a
  string search, or anything like that.  As long as it evaluates to
  <code>True</code>, it will work!
</li>
</ul>


</div>

</div>

<div id="outline-container-2-3-7" class="outline-4">
<h4 id="sec-2-3-7"><span class="section-number-4">2.3.7</span> Review</h4>
<div class="outline-text-4" id="text-2-3-7">

<ul class="org-ul">
<li><code>if</code>, <code>elif</code> and <code>else</code> can be used to control the flow of a program
</li>
<li>strings are a type of a object, and have a number of methods that
  come with them, including <code>find</code>, <code>upper</code> and <code>swapcase</code>
<ul class="org-ul">
<li>methods are called using <code>mystring.method()</code>
</li>
<li>The list of methods for strings can be found in the <a href="http://docs.python.org/library/stdtypes.html">Python documentation</a>
</li>
</ul>

</li>
<li><code>def</code> can be used to define a function
<ul class="org-ul">
<li>The <code>return</code> statement determine what the function returns
</li>
</ul>

</li>
</ul>


</div>
</div>

</div>

<div id="outline-container-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> For Loops</h3>
<div class="outline-text-3" id="text-2-4">

<p>   The for loop is a major component of how python is used.  You can
   iterate over lots of different things, and python is smart enough
   to know how to do it.  
</p><ul class="org-ul">
<li><b>Note:</b> the following is what's called pseudocode - something
     that looks like code, but isn't going to run.  It's a helpful way
     to clarify the steps that you need to take to get things to
     work.
</li>
</ul>




<pre class="src src-python"><span style="color: #728a05;">for</span> (item <span style="color: #728a05;">in</span> container):
    process item
    <span style="color: #728a05;">print</span> item
<span style="color: #728a05;">print</span> <span style="color: #259185;">"done processing items!"</span>
</pre>



<p>
   Notice the use of the &lt;TAB&gt; (or spacing) - that's how python knows whether we're
   inside the loop or not!
</p>
</div>

<div id="outline-container-2-4-1" class="outline-4">
<h4 id="sec-2-4-1"><span class="section-number-4">2.4.1</span> Example</h4>
<div class="outline-text-4" id="text-2-4-1">




<pre class="src src-python"><span style="color: #728a05;">str</span> = <span style="color: #259185;">"Daddy ran to help Ann.  Up and down went the seesaw."</span>      
<span style="color: #728a05;">for</span> word <span style="color: #728a05;">in</span> <span style="color: #728a05;">str</span>.split():
    <span style="color: #728a05;">print</span> word
</pre>



<pre class="example">Daddy
ran
to
help
Ann.
Up
and
down
went
the
seesaw.
</pre>


<p>
    Notice the use of <code>str.split()</code>: this is an example of calling a
    <i>method</i> of a <i>string object</i>.  It returns a <b>list</b> of words after
    splitting the string on whitespace.
</p>
</div>
</div>

</div>

<div id="outline-container-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> Lists</h3>
<div class="outline-text-3" id="text-2-5">


<ul class="org-ul">
<li>A <b>list</b> is a data type that can hold anything.
</li>
<li>Lists are iterable (you can pass them to a <code>for</code> loop
</li>
<li>You can <code>.append</code>, <code>.extend</code>,and otherwise manipulate lists.  <a href="http://docs.python.org/tutorial/datastructures.html">Python Documentation</a>
</li>
</ul>





<pre class="src src-python"><span style="color: #2075c7;">mylist</span> = [<span style="color: #259185;">'dogs'</span>,1,4,<span style="color: #259185;">"fishes"</span>,[<span style="color: #259185;">"hearts"</span>,<span style="color: #259185;">"clovers"</span>],<span style="color: #728a05;">list</span>]  
<span style="color: #728a05;">for</span> element <span style="color: #728a05;">in</span> mylist:
    <span style="color: #728a05;">print</span> element    
mylist.reverse()
<span style="color: #728a05;">print</span> mylist
</pre>


<pre class="example">
dogs
1
4
fishes
['hearts', 'clovers']
&lt;type 'list'&gt;
[&lt;type 'list'&gt;, ['hearts', 'clovers'], 'fishes', 4, 1, 'dogs']
</pre>




</div>

</div>

<div id="outline-container-2-6" class="outline-3">
<h3 id="sec-2-6"><span class="section-number-3">2.6</span> Exercise</h3>
<div class="outline-text-3" id="text-2-6">

<ol class="org-ol">
<li>Write a function that takes in a string, and outputs the square of
   its length.
</li>
<li>Write a function that returns the number of capitalized letters in
   a string. <i>Hint: try using =lower= and the == operator</i>
</li>
<li>Write a function that returns everything in a string up to "dog",
   and returns "not found" if the string is not present.
</li>
</ol>





</div>

<div id="outline-container-2-6-1" class="outline-4">
<h4 id="sec-2-6-1"><span class="section-number-4">2.6.1</span> Exercise Solutions</h4>
<div class="outline-text-4" id="text-2-6-1">

<ul>
<li id="sec-2-6-1-1">Exercise 1:<br/>
Write a function that takes in a string, and outputs the square of its
length.

<p>
Notice that a function can call another function that you wrote.
</p>


<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">square</span>(x):
    <span style="color: #728a05;">return</span> x*x

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">sqlen</span>(x):
    <span style="color: #728a05;">return</span> square(<span style="color: #728a05;">len</span>(x))

<span style="color: #728a05;">print</span> sqlen(<span style="color: #259185;">"Feet"</span>)
</pre>


<pre class="example">
16
</pre>


</li>
</ul>
<ul>
<li id="sec-2-6-1-2">Exercise 2<br/>
Write a function that returns the number of capitalized letters in a
string.




<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">numcaps</span>(x):
    <span style="color: #2075c7;">lowerstr</span> = x.lower()
    <span style="color: #2075c7;">ncaps</span> = 0
    <span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> <span style="color: #728a05;">range</span>(<span style="color: #728a05;">len</span>(x)):
        <span style="color: #728a05;">if</span> lowerstr[i]!=x[i]:
            <span style="color: #2075c7;">ncaps</span> += 1
    <span style="color: #728a05;">return</span> ncaps

<span style="color: #2075c7;">teststr</span> = <span style="color: #259185;">"Dogs and Cats are both Animals"</span>
<span style="color: #728a05;">print</span> teststr, <span style="color: #259185;">"has"</span>, <span style="color: #728a05;">str</span>(numcaps(teststr)), <span style="color: #259185;">"capital letters"</span>
</pre>


<pre class="example">
Dogs and Cats are both Animals has 3 capital letters
</pre>


</li>
</ul>
<ul>
<li id="sec-2-6-1-3">Exercise 3<br/>




<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">findDog</span>(x):
    <span style="color: #2075c7;">mylist</span> = x.split(<span style="color: #259185;">"dog"</span>)
    <span style="color: #728a05;">if</span> <span style="color: #728a05;">len</span>(mylist) &lt; 2:
        <span style="color: #728a05;">return</span> <span style="color: #259185;">"not found"</span>
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">return</span> mylist[0]    
    <span style="color: #728a05;">return</span> mylist
<span style="color: #728a05;">print</span> findDog(<span style="color: #259185;">"i have a dog but not a cat"</span>)
<span style="color: #728a05;">print</span> findDog(<span style="color: #259185;">"i have a fish but not a cat"</span>)
<span style="color: #728a05;">print</span> findDog(<span style="color: #259185;">"i have a dog but not a dogwood"</span>)

</pre>


<pre class="example">
i have a 
not found
i have a 
</pre>


</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-2-7" class="outline-3">
<h3 id="sec-2-7"><span class="section-number-3">2.7</span> <code>dict</code> type</h3>
<div class="outline-text-3" id="text-2-7">

<p>   A <code>dict</code>, short for dictionary, is a helpful data structure in
   Python for building mappings between inputs and outputs.
</p>
<p>
<img src="http://code.google.com/edu/languages/google-python-class/images/dict.png"  alt="http://code.google.com/edu/languages/google-python-class/images/dict.png" />
</p>

</div>

<div id="outline-container-2-7-1" class="outline-4">
<h4 id="sec-2-7-1"><span class="section-number-4">2.7.1</span> Examples</h4>
<div class="outline-text-4" id="text-2-7-1">




<pre class="src src-python"><span style="color: #2075c7;">mydict</span> = <span style="color: #728a05;">dict</span>()
<span style="color: #2075c7;">mydict</span>[<span style="color: #259185;">"dogs"</span>] = 14
<span style="color: #2075c7;">mydict</span>[<span style="color: #259185;">"fish"</span>] = <span style="color: #259185;">"slumberland"</span>
<span style="color: #2075c7;">mydict</span>[<span style="color: #259185;">"dogs"</span>]+= 3
<span style="color: #728a05;">print</span> mydict
</pre>


<pre class="example">
{'fish': 'slumberland', 'dogs': 17}
</pre>





<pre class="src src-python"><span style="color: #728a05;">len</span>(mydict[<span style="color: #259185;">"fish"</span>])
</pre>



<p>
    One of the nice things about python is that even when very
    condensed, it is still readable.  People talk about coding in a
    pythonic way, meaning to write very tight, readable code.
</p>



<pre class="src src-python"><span style="color: #728a05;">print</span> <span style="color: #728a05;">dict</span>([(x, x**2) <span style="color: #728a05;">for</span> x <span style="color: #728a05;">in</span> (2, 4, 6)]) 
</pre>


<pre class="example">
{2: 4, 4: 16, 6: 36}
</pre>


<p>
    Let's use a dictionary to store word counts from a sentence.
</p>



<pre class="src src-python"><span style="color: #728a05;">str</span> = <span style="color: #259185;">"Up and down went the seesaw. Up it went.  Down it went.  Up, up, up!"</span>
<span style="color: #728a05;">print</span> <span style="color: #728a05;">str</span>
<span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> [<span style="color: #259185;">","</span>,<span style="color: #259185;">"."</span>,<span style="color: #259185;">"!"</span>]:
    <span style="color: #728a05;">str</span> = <span style="color: #728a05;">str</span>.replace(i,<span style="color: #259185;">" "</span>)
<span style="color: #728a05;">print</span> <span style="color: #728a05;">str</span>
<span style="color: #728a05;">str</span> = <span style="color: #728a05;">str</span>.lower()
<span style="color: #728a05;">print</span> <span style="color: #728a05;">str</span>
<span style="color: #728a05;">print</span> <span style="color: #728a05;">set</span>(<span style="color: #728a05;">str</span>.lower().split())
</pre>


<pre class="example">
Up and down went the seesaw. Up it went.  Down it went.  Up, up, up!
Up and down went the seesaw  Up it went   Down it went   Up  up  up 
up and down went the seesaw  up it went   down it went   up  up  up 
set(['and', 'up', 'it', 'down', 'seesaw', 'went', 'the'])
</pre>


<p>
    We see that a <code>set</code> contains an unordered collection of the
    elements of the list returned by <code>split()</code>.  Let's make a dictionary
    with keys that are pulled from this set.
</p>



<pre class="src src-python"><span style="color: #728a05;">str</span> = <span style="color: #259185;">"Up and down went the seesaw. Up it went.  Down it went.  Up, up, up!"</span>
<span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> [<span style="color: #259185;">","</span>,<span style="color: #259185;">"."</span>,<span style="color: #259185;">"!"</span>]:
    <span style="color: #728a05;">str</span> = <span style="color: #728a05;">str</span>.replace(i,<span style="color: #259185;">" "</span>)
<span style="color: #2075c7;">words</span> = <span style="color: #728a05;">str</span>.lower().split()
<span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>.fromkeys(<span style="color: #728a05;">set</span>(words),0)
<span style="color: #728a05;">print</span> d
<span style="color: #728a05;">for</span> w <span style="color: #728a05;">in</span> words:
    <span style="color: #2075c7;">d</span>[w]+=1
<span style="color: #728a05;">print</span> d
</pre>


<pre class="example">
{'and': 0, 'down': 0, 'seesaw': 0, 'went': 0, 'the': 0, 'up': 0, 'it': 0}
{'and': 1, 'down': 2, 'seesaw': 1, 'went': 3, 'the': 1, 'up': 5, 'it': 2}
</pre>


</div>

</div>

<div id="outline-container-2-7-2" class="outline-4">
<h4 id="sec-2-7-2"><span class="section-number-4">2.7.2</span> Writing to CSV</h4>
<div class="outline-text-4" id="text-2-7-2">


<p>
    A very useful feature of dictionaries is that there is an easy
    method to write them out to a CSV (comma-separated variable) file.
</p>



<pre class="src src-python"><span style="color: #728a05;">import</span> csv
<span style="color: #2075c7;">f</span> = <span style="color: #728a05;">open</span>(<span style="color: #259185;">'/tmp/blah.csv'</span>,<span style="color: #259185;">'w'</span>)
<span style="color: #2075c7;">nums</span> = [1,2,3]
<span style="color: #2075c7;">c</span> = csv.DictWriter(f,nums)
<span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> <span style="color: #728a05;">range</span>(0,10):
    c.writerow(<span style="color: #728a05;">dict</span>([(x, x**i) <span style="color: #728a05;">for</span> x <span style="color: #728a05;">in</span> nums]))
f.close()
</pre>



<p>
    This writes out the following csv file:
</p>


<pre class="example">1,1,1
1,2,3
1,4,9
1,8,27
1,16,81
1,32,243
1,64,729
1,128,2187
1,256,6561
1,512,19683    
</pre>



</div>

</div>

<div id="outline-container-2-7-3" class="outline-4">
<h4 id="sec-2-7-3"><span class="section-number-4">2.7.3</span> A Note on File Objects</h4>
<div class="outline-text-4" id="text-2-7-3">


<ul class="org-ul">
<li>Think about file objects like a book
<ul class="org-ul">
<li>If a file is open, you don't want other people to mess with it
</li>
<li>Files can be opened for reading or writing
</li>
<li>There are methods to move around an open file
</li>
</ul>

</li>
<li>Close the book when you're done reading it!
</li>
<li>Python documentation on "File I/O" is <a href="http://docs.python.org/tutorial/inputoutput.html">here</a>
</li>
</ul>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col class="left" /></colgroup>
<colgroup><col class="left" /></colgroup>
<colgroup><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">English</th><th scope="col" class="left">Python</th><th scope="col" class="left">Output</th></tr>
</thead>
<tbody>
<tr><td class="left">Open <code>blah.txt</code> just for reading</td><td class="left"><code>f = open('blah.txt','r')</code></td><td class="left">file object <code>f</code></td></tr>
<tr><td class="left">Get the next line in a file</td><td class="left"><code>str = f.readline()</code></td><td class="left">string containing a single line</td></tr>
<tr><td class="left">Get the entire file</td><td class="left"><code>str = f.read()</code></td><td class="left">string containing entire file</td></tr>
<tr><td class="left">Go to the beginning of a file</td><td class="left"><code>f.seek(0)</code></td><td class="left"><code>None</code></td></tr>
<tr><td class="left">Close <code>blah.txt</code></td><td class="left"><code>f.close()</code></td><td class="left"><code>None</code></td></tr>
</tbody>
</table>


<p>
To play with this, download <a href="http://www.people.fas.harvard.edu/~astorer/scraping/gaga.txt">this file</a> somewhere on your hard drive.
I'm putting it on my hard drive as <code>/tmp/gaga.txt</code>.  On Windows, it
may look more like <code>C:\temp\gaga.txt</code> - just make sure you get the
path correct when you tell Python where to look!
</p>



<pre class="src src-python"><span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">On a mac:</span>
<span style="color: #81908f; font-style: italic;">#</span><span style="color: #81908f; font-style: italic;">curl http://www.people.fas.harvard.edu/~astorer/scraping/gaga.txt &gt; /tmp/gaga.txt</span>
<span style="color: #2075c7;">f</span> = <span style="color: #728a05;">open</span>(<span style="color: #259185;">'/tmp/gaga.txt'</span>,<span style="color: #259185;">'r'</span>)
<span style="color: #728a05;">print</span> f
<span style="color: #728a05;">str</span> = f.read()
<span style="color: #728a05;">print</span> <span style="color: #259185;">"str has length: "</span>, <span style="color: #728a05;">len</span>(<span style="color: #728a05;">str</span>)
<span style="color: #2075c7;">str2</span> = f.read()
<span style="color: #728a05;">print</span> <span style="color: #259185;">"str2 has length: "</span>, <span style="color: #728a05;">len</span>(str2)
f.seek(0)
<span style="color: #2075c7;">str3</span> = f.readline()
<span style="color: #728a05;">print</span> <span style="color: #259185;">"str3 has length: "</span>, <span style="color: #728a05;">len</span>(str3)
f.close()
</pre>


<pre class="example">
&lt;open file '/tmp/gaga.txt', mode 'r' at 0x10045ef60&gt;
str has length:  1220
str2 has length:  0
str3 has length:  77
</pre>


<p>
You'll use file objects <i>a lot</i>.  As we see them, I'll try to point
out what's important about them.
</p>
</div>

</div>

<div id="outline-container-2-7-4" class="outline-4">
<h4 id="sec-2-7-4"><span class="section-number-4">2.7.4</span> Exercise</h4>
<div class="outline-text-4" id="text-2-7-4">


<ul>
<li id="sec-2-7-4-1">Exercise 1<br/>
Write a function that counts the number of unique letters in a word.

</li>
</ul>
<ul>
<li id="sec-2-7-4-2">Exercise 2<br/>
Write a function that takes in a string, and returns a <code>dict</code> that
tells you how many words of each number of letters there are.
<pre class="example">
"Dogs and cats are all animals"
 dogs and cats are al  animls
 4    3   4    3   2   6
 {2: 1, 3: 2, 4: 2, 6: 1}
</pre>


</li>
</ul>
<ul>
<li id="sec-2-7-4-3">Exercise 3<br/>
Loop over a list of strings, and write a csv that contains a column
for each number and a row for each string.
<pre class="example">
 1,2,3,4,5,6,7,8,9,10,11,12,13
 2,3,2,3,4,5,2,3,2,1 , 0, 0, 0
 5,2,1,0,1,2,0,0,0,0 , 0, 0, 0
 etc.
</pre>


</li>
</ul>
</div>

</div>

<div id="outline-container-2-7-5" class="outline-4">
<h4 id="sec-2-7-5"><span class="section-number-4">2.7.5</span> Exercise Solutions</h4>
<div class="outline-text-4" id="text-2-7-5">


<ul>
<li id="sec-2-7-5-1">Exercise 1<br/>
Write a function that counts the number of unique letters in a word.




<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">uniqueletters</span>(w):
    <span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>()
    <span style="color: #728a05;">for</span> char <span style="color: #728a05;">in</span> w:
        <span style="color: #2075c7;">d</span>[char] = 1
    <span style="color: #728a05;">return</span> <span style="color: #728a05;">len</span>(d.keys())
<span style="color: #728a05;">print</span> uniqueletters(<span style="color: #259185;">"dog"</span>)
<span style="color: #728a05;">print</span> uniqueletters(<span style="color: #259185;">"dogged"</span>)

</pre>


<pre class="example">
3
4
</pre>


</li>
</ul>
<ul>
<li id="sec-2-7-5-2">Exercise 2<br/>
Write a function that takes in a string, and returns a <code>dict</code> that
tells you how many words of each number of letters there are.
<pre class="example">
"Dogs and cats are all animals"
 dogs and cats are al  animls
 4    3   4    3   2   6
 {2: 1, 3: 2, 4: 2, 6: 1}
</pre>





<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">uniqueletters</span>(w):
    <span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>()
    <span style="color: #728a05;">for</span> char <span style="color: #728a05;">in</span> w:
        <span style="color: #2075c7;">d</span>[char] = 1
    <span style="color: #728a05;">return</span> <span style="color: #728a05;">len</span>(d.keys())

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">wordcounter</span>(<span style="color: #728a05;">str</span>):
    <span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>()
    <span style="color: #728a05;">for</span> w <span style="color: #728a05;">in</span> <span style="color: #728a05;">str</span>.split():
        <span style="color: #2075c7;">u</span> = uniqueletters(w)
        <span style="color: #728a05;">if</span> u <span style="color: #728a05;">in</span> d.keys():           
            <span style="color: #2075c7;">d</span>[u]+=1
        <span style="color: #728a05;">else</span>:
            <span style="color: #2075c7;">d</span>[u] = 1
    <span style="color: #728a05;">return</span> d

<span style="color: #728a05;">print</span> wordcounter(<span style="color: #259185;">"Dogs and cats are all animals"</span>)

</pre>


<pre class="example">
{2: 1, 3: 2, 4: 2, 6: 1}
</pre>


</li>
</ul>
<ul>
<li id="sec-2-7-5-3">Exercise 3<br/>
Loop over a list of strings, and write a csv that contains a column
for each number and a row for each string.
<pre class="example">
 1,2,3,4,5,6,7,8,9,10,11,12,13
 2,3,2,3,4,5,2,3,2,1 , 0, 0, 0
 5,2,1,0,1,2,0,0,0,0 , 0, 0, 0
 etc.
</pre>





<pre class="src src-python"><span style="color: #728a05;">import</span> csv
<span style="color: #728a05;">def</span> <span style="color: #2075c7;">uniqueletters</span>(w):
    <span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>()
    <span style="color: #728a05;">for</span> char <span style="color: #728a05;">in</span> w:
        <span style="color: #2075c7;">d</span>[char] = 1
    <span style="color: #728a05;">return</span> <span style="color: #728a05;">len</span>(d.keys())

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">wordcounter</span>(<span style="color: #728a05;">str</span>):
    <span style="color: #2075c7;">d</span> = <span style="color: #728a05;">dict</span>()
    <span style="color: #728a05;">for</span> w <span style="color: #728a05;">in</span> <span style="color: #728a05;">str</span>.split():
        <span style="color: #2075c7;">u</span> = uniqueletters(w)
        <span style="color: #728a05;">if</span> u <span style="color: #728a05;">in</span> d.keys():           
            <span style="color: #2075c7;">d</span>[u]+=1
        <span style="color: #728a05;">else</span>:
            <span style="color: #2075c7;">d</span>[u] = 1
    <span style="color: #728a05;">return</span> d

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">listwriter</span>(l):
    <span style="color: #2075c7;">emptydict</span> = <span style="color: #728a05;">dict</span>([(x, 0) <span style="color: #728a05;">for</span> x <span style="color: #728a05;">in</span> <span style="color: #728a05;">range</span>(1,26)])
    <span style="color: #2075c7;">f</span> = <span style="color: #728a05;">open</span>(<span style="color: #259185;">'/tmp/blah.csv'</span>,<span style="color: #259185;">'w'</span>)
    <span style="color: #2075c7;">c</span> = csv.DictWriter(f,<span style="color: #728a05;">sorted</span>(emptydict.keys())) 
    c.writeheader()    
    <span style="color: #728a05;">for</span> <span style="color: #728a05;">str</span> <span style="color: #728a05;">in</span> l:
        c.writerow(<span style="color: #728a05;">dict</span>(emptydict.items()+wordcounter(<span style="color: #728a05;">str</span>).items()))
    f.close()

listwriter([<span style="color: #259185;">"Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation."</span>,
            <span style="color: #259185;">"We observe today not a victory of party, but a celebration of freedom -- symbolizing an end, as well as a beginning -- signifying renewal, as well as change."</span>, 
            <span style="color: #259185;">"So, first of all, let me assert my firm belief that the only thing we have to fear is fear itself -- nameless, unreasoning, unjustified terror which paralyzes needed efforts to convert retreat into advance."</span>])

</pre>



<p>
Here is the resulting CSV file:
</p>


<pre class="example">1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
1,2,1,2,5,3,0,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
5,8,4,1,2,4,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,7,6,9,4,2,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
</pre>


</li>
</ul>
</div>
</div>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Aspects of Twitter</h2>
<div class="outline-text-2" id="text-3">



</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Anatomy of a Tweet</h3>
<div class="outline-text-3" id="text-3-1">


</div>

<div id="outline-container-3-1-1" class="outline-4">
<h4 id="sec-3-1-1"><span class="section-number-4">3.1.1</span> This is a tweet</h4>
<div class="outline-text-4" id="text-3-1-1">




<pre class="example">RT @AlbertBreer: Gronkowski had screws inserted in his forearm at
MGH this AM. He'll want to play during that Texans-Niners
turn. That'd be awfully quick.
</pre>

<ul class="org-ul">
<li><code>RT</code>: Retweet
</li>
<li><code>@AlbertBreer</code>: A twitter user starts with @
</li>
<li>Max characters: 140
</li>
</ul>

</div>

</div>

<div id="outline-container-3-1-2" class="outline-4">
<h4 id="sec-3-1-2"><span class="section-number-4">3.1.2</span> More information</h4>
<div class="outline-text-4" id="text-3-1-2">




<pre class="example">[{"created_at":"Mon, 19 Nov 2012 20:19:21 +0000",
  "from_user":"theemarkweber",
  "from_user_id":214343936,
  "from_user_id_str":"214343936",
  "from_user_name":"Mark Weber",
  "geo":null,
  "id":270622312510939137,
  "id_str":"270622312510939137",
  "iso_language_code":"en",
  "metadata":{"result_type":"recent"},
  "profile_image_url":"http:\/\/a0.twimg.com\/profile_images\/2597471289\/d0ll7w5wu5dra272h3jn_normal.jpeg",
  "profile_image_url_https":"https:\/\/si0.twimg.com\/profile_images\/2597471289\/d0ll7w5wu5dra272h3jn_normal.jpeg",
  "source":"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;",
  "text":"RT @AlbertBreer: Gronkowski had screws inserted in his forearm at MGH this AM. He'll want to play during that Texans-Niners turn. That'd be awfully quick.",
  "to_user":null,
  "to_user_id":0,
  "to_user_id_str":"0",
  "to_user_name":null}]
</pre>


<ul class="org-ul">
<li>This is the available information in a tweet that can be
      obtained from twitter
</li>
</ul>



</div>
</div>

</div>

<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Anatomy of a Twitter User</h3>
<div class="outline-text-3" id="text-3-2">


<p>
Users of twitter have a lot of data about them in addition to just
their tweets!
</p>
<p>
Notice:
</p><ul class="org-ul">
<li>The language of the user
</li>
<li>The location of the user
</li>
<li>Also we can get:
<ul class="org-ul">
<li>Followers/Friends
</li>
<li>Recent tweets
</li>
<li>Favorite tweets
</li>
<li>etc.
</li>
</ul>

</li>
</ul>





<pre class="example">==&gt; statuses_count :
28
==&gt; profile_background_color :
C0DEED
==&gt; friends_count :
36
==&gt; profile_link_color :
0084B4
==&gt; profile_image_url :
http://a0.twimg.com/profile_images/1896597694/iqssrtc_normal.jpg
==&gt; notifications :
False
==&gt; profile_background_image_url_https :
https://si0.twimg.com/images/themes/theme1/bg.png
==&gt; profile_background_image_url :
http://a0.twimg.com/images/themes/theme1/bg.png
==&gt; name :
Research Consulting
==&gt; lang :
en
==&gt; profile_background_tile :
False
==&gt; favourites_count :
0
==&gt; screen_name :
iqssrtc
==&gt; url :
http://dss.iq.harvard.edu
==&gt; created_at :
Wed Mar 14 14:09:08 +0000 2012
==&gt; contributors_enabled :
False
==&gt; location :
Cambridge, MA
==&gt; profile_sidebar_border_color :
C0DEED
==&gt; default_profile :
True
==&gt; following :
False
</pre>




</div>

</div>

<div id="outline-container-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> How Twitter has changed</h3>
<div class="outline-text-3" id="text-3-3">

<ul class="org-ul">
<li>Geocoding
</li>
<li>Use over time

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col class="left" /><col class="right" />
</colgroup>
<thead>
<tr><th scope="col" class="left">Date</th><th scope="col" class="right">Tweets (millions/day)</th></tr>
</thead>
<tbody>
<tr><td class="left">October, 2012</td><td class="right">500</td></tr>
<tr><td class="left">June, 2012</td><td class="right">400</td></tr>
<tr><td class="left">March, 2012</td><td class="right">340</td></tr>
<tr><td class="left">October, 2011</td><td class="right">250</td></tr>
<tr><td class="left">September, 2010</td><td class="right">90</td></tr>
<tr><td class="left">February, 2010</td><td class="right">50</td></tr>
<tr><td class="left">November, 2009</td><td class="right">27</td></tr>
<tr><td class="left">December, 2008</td><td class="right">2</td></tr>
<tr><td class="left">2008</td><td class="right">0.3</td></tr>
<tr><td class="left">2007</td><td class="right">0.005</td></tr>
<tr><td class="left">March, 2006</td><td class="right">0.000001</td></tr>
</tbody>
</table>


</li>
<li>How much data is this?
</li>
</ul>


<p>
500,000,000 * (~ 5kb) = 23.2831 GB
</p>

</div>

</div>

<div id="outline-container-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> APIs</h3>
<div class="outline-text-3" id="text-3-4">

<ul class="org-ul">
<li>"Application Programming Interface"
</li>
<li>Ways to interface with an application through a program
<ul class="org-ul">
<li>Think about how a site like Yelp can embed Google Maps rather than linking to it
</li>
</ul>

</li>
</ul>



</div>

<div id="outline-container-3-4-1" class="outline-4">
<h4 id="sec-3-4-1"><span class="section-number-4">3.4.1</span> Twitter API</h4>
<div class="outline-text-4" id="text-3-4-1">

<ul class="org-ul">
<li>Latest version: 1.1, Released August 2012
</li>
<li>Will not be the same in 5 years!
</li>
<li>List of everything you can do:
<ul class="org-ul">
<li><a href="https://dev.twitter.com/docs/api/1.1">https://dev.twitter.com/docs/api/1.1</a>
</li>
<li>Examples:
<ul class="org-ul">
<li>Get all posts about Sarah Palin before October 2008
<ul class="org-ul">
<li>(<i>this is actually no longer possible</i>)
</li>
</ul>

</li>
<li>Get all posts about Hurricane Katrina in the Houston area
</li>
</ul>

</li>
</ul>

</li>
</ul>


</div>

</div>

<div id="outline-container-3-4-2" class="outline-4">
<h4 id="sec-3-4-2"><span class="section-number-4">3.4.2</span> Limitations of Twitter API</h4>
<div class="outline-text-4" id="text-3-4-2">


<ul class="org-ul">
<li>For some uses, you need an application
</li>
<li>Extensive <b>rate limiting</b>
</li>
<li>Not everything collected by Twitter is exposed by the API
</li>
</ul>


</div>

</div>

<div id="outline-container-3-4-3" class="outline-4">
<h4 id="sec-3-4-3"><span class="section-number-4">3.4.3</span> JSON and API searches</h4>
<div class="outline-text-4" id="text-3-4-3">


<p>
<a href="http://search.twitter.com/search.json?q=gronkowski">http://search.twitter.com/search.json?q=gronkowski</a>
</p>



<pre class="src src-javascript">{<span style="color: #259185;">"completed_in"</span>:0.011,
 <span style="color: #259185;">"max_id"</span>:293883536627363840,
 <span style="color: #259185;">"max_id_str"</span>:<span style="color: #259185;">"293883536627363840"</span>,
 <span style="color: #259185;">"next_page"</span>:<span style="color: #259185;">"?page=2&amp;max_id=293883536627363840&amp;q=gronkowski"</span>,
 <span style="color: #259185;">"page"</span>:1,<span style="color: #259185;">"query"</span>:<span style="color: #259185;">"gronkowski"</span>,
 <span style="color: #259185;">"refresh_url"</span>:<span style="color: #259185;">"?since_id=293883536627363840&amp;q=gronkowski"</span>,
 <span style="color: #259185;">"results"</span>:[
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:51:09 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"ezmoney3478"</span>,<span style="color: #259185;">"from_user_id"</span>:395745114,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"395745114"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Kevin Perich "</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293883536627363840,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293883536627363840"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/1761062514\/image_normal.jpg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/1761062514\/image_normal.jpg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"RT @SmokinJC6: #LetsPretend that Rob Gronkowski wasn't a causal user of the drug cocaine"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:40:22 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"OGKaufer"</span>,<span style="color: #259185;">"from_user_id"</span>:430404805,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"430404805"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Kevin K"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293880819930509313,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293880819930509313"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2811609388\/eaa7866c9f50476811d0073e4ec2de55_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2811609388\/eaa7866c9f50476811d0073e4ec2de55_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/&amp;quot;&amp;gt;web&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"#Patriots are pussies. Only 1 of their pro bowl players are actually attending (other than Gronkowski) because the rest are \"out for injury\""</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:35:53 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"WaceTragner"</span>,<span style="color: #259185;">"from_user_id"</span>:21977325,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"21977325"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Wacington D. Tragner"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293879691796942848,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293879691796942848"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/99260325\/n73400266_34070453_530_normal.jpg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/99260325\/n73400266_34070453_530_normal.jpg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"@therealtwatto @KievGuy Brust looks like a mini Gronkowski, kinda"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">"therealtwatto"</span>,<span style="color: #259185;">"to_user_id"</span>:210318115,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"210318115"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">"Chris Thorpe"</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:28:35 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"lilahmy3"</span>,<span style="color: #259185;">"from_user_id"</span>:302811957,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"302811957"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Ahmad Munir"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293877855107051520,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293877855107051520"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/3040876646\/97e95fb7f82b597ba75e9502440bbaf2_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/3040876646\/97e95fb7f82b597ba75e9502440bbaf2_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"@Salamiscot I'm jk they didn't cheat but it would've been a completely different game with Gronkowski and Talib in"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">"Salamiscot"</span>,<span style="color: #259185;">"to_user_id"</span>:92390272,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"92390272"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">"Scot Spears"</span>,<span style="color: #259185;">"in_reply_to_status_id"</span>:293871588774920192,<span style="color: #259185;">"in_reply_to_status_id_str"</span>:<span style="color: #259185;">"293871588774920192"</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:26:11 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"tadthebad"</span>,<span style="color: #259185;">"from_user_id"</span>:158559484,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"158559484"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Todd Everson"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293877252939190273,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293877252939190273"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"de"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2272199020\/klk091tjn4ch9sj79nas_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2272199020\/klk091tjn4ch9sj79nas_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/#!\/download\/ipad&amp;quot;&amp;gt;Twitter for iPad&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"RT @DeeepThreat: @jerrythornton1 @PFF Gronkowski 148.2 target (passer) rating. Woodhead 120.7, Edelman 118.6, Welker 96.6"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"in_reply_to_status_id"</span>:293821205654425600,<span style="color: #259185;">"in_reply_to_status_id_str"</span>:<span style="color: #259185;">"293821205654425600"</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:22:14 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"__DaGAWD"</span>,<span style="color: #259185;">"from_user_id"</span>:282815887,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"282815887"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Thug God Ass Nigga"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293876256557117440,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293876256557117440"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2990761885\/64c285f33c7ebde005b4ed2e318b7a5a_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2990761885\/64c285f33c7ebde005b4ed2e318b7a5a_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/&amp;quot;&amp;gt;web&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"My real name is Gronkowski"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:15:49 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"Y2Jheard"</span>,<span style="color: #259185;">"from_user_id"</span>:42330140,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"42330140"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Jordan Heard"</span>,<span style="color: #259185;">"geo"</span>:{<span style="color: #259185;">"coordinates"</span>:[31.389764,-102.350542],<span style="color: #259185;">"type"</span>:<span style="color: #259185;">"Point"</span>},<span style="color: #259185;">"id"</span>:293874643008356352,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293874643008356352"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"de"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/3131311082\/566992c884977a9c4c023be353397786_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/3131311082\/566992c884977a9c4c023be353397786_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"@espn @Y2Jheard: Rob Gronkowski, Javale McGee aaannnndddd Metta World Peace #AthleteDinner"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">"espn"</span>,<span style="color: #259185;">"to_user_id"</span>:2557521,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"2557521"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">"ESPN"</span>,<span style="color: #259185;">"in_reply_to_status_id"</span>:293799955162869760,<span style="color: #259185;">"in_reply_to_status_id_str"</span>:<span style="color: #259185;">"293799955162869760"</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:11:00 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"Y2Jheard"</span>,<span style="color: #259185;">"from_user_id"</span>:42330140,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"42330140"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Jordan Heard"</span>,<span style="color: #259185;">"geo"</span>:{<span style="color: #259185;">"coordinates"</span>:[31.389699,-102.350473],<span style="color: #259185;">"type"</span>:<span style="color: #259185;">"Point"</span>},<span style="color: #259185;">"id"</span>:293873432096022528,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293873432096022528"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"de"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/3131311082\/566992c884977a9c4c023be353397786_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/3131311082\/566992c884977a9c4c023be353397786_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"Rob Gronkowski, Javale McGee aaannnndddd Metta World Peace #AthleteDinner"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:08:24 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"steveh603"</span>,<span style="color: #259185;">"from_user_id"</span>:116954234,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"116954234"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Steve H"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293872776010420224,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293872776010420224"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"de"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2213638557\/Steve_Jordan_normal.jpg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2213638557\/Steve_Jordan_normal.jpg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/www.tweetcaster.com&amp;quot;&amp;gt;TweetCaster for Android&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"RT @DeeepThreat: @jerrythornton1 @PFF Gronkowski 148.2 target (passer) rating. Woodhead 120.7, Edelman 118.6, Welker 96.6"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"in_reply_to_status_id"</span>:293821205654425600,<span style="color: #259185;">"in_reply_to_status_id_str"</span>:<span style="color: #259185;">"293821205654425600"</span>},{<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Wed, 23 Jan 2013 00:02:02 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"jerrythornton1"</span>,<span style="color: #259185;">"from_user_id"</span>:133478732,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"133478732"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Jerry Thornton"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293871175858286592,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293871175858286592"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"de"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2827357839\/4e0775a362decf96ff7fdcb044253381_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2827357839\/4e0775a362decf96ff7fdcb044253381_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"RT @DeeepThreat: @jerrythornton1 @PFF Gronkowski 148.2 target (passer) rating. Woodhead 120.7, Edelman 118.6, Welker 96.6"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"in_reply_to_status_id"</span>:293821205654425600,<span style="color: #259185;">"in_reply_to_status_id_str"</span>:<span style="color: #259185;">"293821205654425600"</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Tue, 22 Jan 2013 23:59:24 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"vicremsen"</span>,<span style="color: #259185;">"from_user_id"</span>:308991877,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"308991877"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Victoria Remsen"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293870511568584705,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293870511568584705"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2834030794\/224375576882a971ae1e557da3251095_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2834030794\/224375576882a971ae1e557da3251095_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/iphone&amp;quot;&amp;gt;Twitter for iPhone&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"Awkward how my last two photos on Instagram are of Rob Gronkowski..."</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Tue, 22 Jan 2013 23:35:55 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"_Balls_Deep_"</span>,<span style="color: #259185;">"from_user_id"</span>:325291577,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"325291577"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"John Juan Twan"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293864602209513472,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293864602209513472"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/3065358642\/453fb17d20a2ec66e3d01bcbbe89fe22_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/3065358642\/453fb17d20a2ec66e3d01bcbbe89fe22_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/&amp;quot;&amp;gt;web&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"What family would u rather be apart of? The Gronkowski's, Jones', Mannings, or Harbaughs?"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Tue, 22 Jan 2013 23:21:27 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"Big450"</span>,<span style="color: #259185;">"from_user_id"</span>:283788796,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"283788796"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Gary L Johnson"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293860961956290560,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293860961956290560"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/2447209594\/2WtVfb8u_normal"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/2447209594\/2WtVfb8u_normal"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/www.ea.com\/madden\/&amp;quot;&amp;gt;Madden NFL 13&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"RT @RossTuckerEA Nearly anybody and everybody can be traded. #R. Gronkowski #rumormill #CCM"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Tue, 22 Jan 2013 23:20:03 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"IQFB"</span>,<span style="color: #259185;">"from_user_id"</span>:65704807,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"65704807"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Football Trivia"</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293860609580204034,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293860609580204034"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/362753783\/iqfblogo_normal.jpg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/362753783\/iqfblogo_normal.jpg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twuffer.com&amp;quot;&amp;gt;Twuffer&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"FREE DOWNLOAD: The Ultimate Rob Gronkowski Fun Fact And Trivia Book! #NewEnglandPatriots #RobGronkowski #Gronk http:\/\/t.co\/GHCecwiQ"</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>},
     {<span style="color: #259185;">"created_at"</span>:<span style="color: #259185;">"Tue, 22 Jan 2013 23:07:41 +0000"</span>,<span style="color: #259185;">"from_user"</span>:<span style="color: #259185;">"Chef_Yerardi"</span>,<span style="color: #259185;">"from_user_id"</span>:847930274,<span style="color: #259185;">"from_user_id_str"</span>:<span style="color: #259185;">"847930274"</span>,<span style="color: #259185;">"from_user_name"</span>:<span style="color: #259185;">"Matt Yerardi "</span>,<span style="color: #259185;">"geo"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"id"</span>:293857496542633984,<span style="color: #259185;">"id_str"</span>:<span style="color: #259185;">"293857496542633984"</span>,<span style="color: #259185;">"iso_language_code"</span>:<span style="color: #259185;">"en"</span>,<span style="color: #259185;">"metadata"</span>:{<span style="color: #259185;">"result_type"</span>:<span style="color: #259185;">"recent"</span>},<span style="color: #259185;">"profile_image_url"</span>:<span style="color: #259185;">"http:\/\/a0.twimg.com\/profile_images\/3057796741\/808d3fea71bb74235260fb92484c68b0_normal.jpeg"</span>,<span style="color: #259185;">"profile_image_url_https"</span>:<span style="color: #259185;">"https:\/\/si0.twimg.com\/profile_images\/3057796741\/808d3fea71bb74235260fb92484c68b0_normal.jpeg"</span>,<span style="color: #259185;">"source"</span>:<span style="color: #259185;">"&amp;lt;a href=&amp;quot;http:\/\/twitter.com\/download\/android&amp;quot;&amp;gt;Twitter for Android&amp;lt;\/a&amp;gt;"</span>,<span style="color: #259185;">"text"</span>:<span style="color: #259185;">"Bernard Pollard would be the one to say that Brady should be punished for his slide, after he injured Brady, Welker, and Gronkowski."</span>,<span style="color: #259185;">"to_user"</span>:<span style="color: #259185;">null</span>,<span style="color: #259185;">"to_user_id"</span>:0,<span style="color: #259185;">"to_user_id_str"</span>:<span style="color: #259185;">"0"</span>,<span style="color: #259185;">"to_user_name"</span>:<span style="color: #259185;">null</span>}],
<span style="color: #259185;">"results_per_page"</span>:15,<span style="color: #259185;">"since_id"</span>:0,<span style="color: #259185;">"since_id_str"</span>:<span style="color: #259185;">"0"</span>}
</pre>


<p>
Some points of the API are exposed, like the search API.
</p>
<p>
The searches are returned as a <b>JSON</b>: JavaScript Object Notation
</p>
<p>
This is a concise and common way of bundling data
</p>
<p>
<b>Python</b>: <a href="http://docs.python.org/2/library/json.html">http://docs.python.org/2/library/json.html</a>
<b>R</b>: <a href="http://cran.r-project.org/web/packages/rjson/index.html">http://cran.r-project.org/web/packages/rjson/index.html</a>
</p>
<p>
We are going to use the <code>twitter</code> package in python, but any package
that knows how to pull the JSON from twitter will have the same
result.
</p>

</div>
</div>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Getting Data</h2>
<div class="outline-text-2" id="text-4">


</div>

<div id="outline-container-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> Getting Started on Twitter</h3>
<div class="outline-text-3" id="text-4-1">


<ul class="org-ul">
<li>If you don't have a Twitter account, make one!
<ul class="org-ul">
<li>You'll probably be much more successful at analyzing Twitter data if you're also using the service!
</li>
</ul>

</li>
<li>To be able use the API, you need to have an application.
</li>
<li>Go to <a href="https://dev.twitter.com/apps/new">https://dev.twitter.com/apps/new</a>
</li>
</ul>



</div>

<div id="outline-container-4-1-1" class="outline-4">
<h4 id="sec-4-1-1"><span class="section-number-4">4.1.1</span> Getting set-up in Python</h4>
<div class="outline-text-4" id="text-4-1-1">

<ul class="org-ul">
<li>Install <code>twitter</code> package for python:
</li>
<li>From the command line, run:
</li>
</ul>




<pre class="example">pip install twitter
</pre>

<p>
or, if you prefer <code>easy_install</code>
</p>


<pre class="example">easy_install twitter
</pre>

<p>
If you haven't done this before, it may be tricky!  Do you have
different versions of Python installed?
</p>
</div>

</div>

<div id="outline-container-4-1-2" class="outline-4">
<h4 id="sec-4-1-2"><span class="section-number-4">4.1.2</span> API Limitations</h4>
<div class="outline-text-4" id="text-4-1-2">

<ul class="org-ul">
<li>You need to log in (using the OAuth protocol)
<ul class="org-ul">
<li>Your application gets a number of API calls per user
</li>
<li>Example: You add a "Tweet" function to your e-reader so you can tweet your current location
</li>
</ul>

</li>
<li>API calls are limited by function (e.g., if you max out on posting Tweets, you can still perform searches)
</li>
<li>There is a different API for streaming tweets
</li>
<li>If you break the rules, your application will be <i>blacklisted!</i>
</li>
<li>Your API calls reset after 15 minutes
<ul class="org-ul">
<li>When you get data, you will want to make sure you have code that can handle errors, check your rates and so forth
</li>
</ul>

</li>
</ul>


</div>

</div>

<div id="outline-container-4-1-3" class="outline-4">
<h4 id="sec-4-1-3"><span class="section-number-4">4.1.3</span> Handling Limitations</h4>
<div class="outline-text-4" id="text-4-1-3">

<ul class="org-ul">
<li>You will need to save your data as you go
</li>
</ul>


<p>
Options:
</p><ul class="org-ul">
<li>Put things into a database
</li>
<li>Save your state in Python using "Pickles"
</li>
<li>Convert things to the format you need as you go
</li>
</ul>


</div>

</div>

<div id="outline-container-4-1-4" class="outline-4">
<h4 id="sec-4-1-4"><span class="section-number-4">4.1.4</span> The "OAuth Dance"</h4>
<div class="outline-text-4" id="text-4-1-4">


<p>
An important part of getting data from Twitter is logging in.  Before
getting user data from twitter, you <b>must</b> be logged in as a twitter
user.  There are different strategies that have been used in the past
for authentication.
</p>
<ul>
<li id="sec-4-1-4-1">Authenticating the wrong way<br/>
The wrong way to authenticate:




<pre class="example">username = "alex"
password = "Ekfo))39l4**wlp..x"
login(username,password)
</pre>


<p>
Your password is human readable!  <b>Bad!</b>
</p>
<p>
You're going to send it unencrypted over your network? <b>Bad!</b>
</p>
</li>
</ul>
<ul>
<li id="sec-4-1-4-2">Authenticating the right way<br/>

<p>
A better way to authenticate:
</p>
<ol class="org-ol">
<li>Say "please authenticate me"
</li>
<li>Get directed to the Twitter website
</li>
<li>Enter your user name and password
</li>
<li>Save a token on your computer that says you're legit
</li>
</ol>


</li>
</ul>
<ul>
<li id="sec-4-1-4-3">How to login<br/>

<p>
Stolen from <a href="https://github.com/ptwobrussell/Mining-the-Social-Web">https://github.com/ptwobrussell/Mining-the-Social-Web</a>
</p>



<pre class="src src-python"><span style="color: #728a05;">import</span> os
<span style="color: #728a05;">import</span> twitter

<span style="color: #728a05;">from</span> twitter.oauth <span style="color: #728a05;">import</span> write_token_file, read_token_file
<span style="color: #728a05;">from</span> twitter.oauth_dance <span style="color: #728a05;">import</span> oauth_dance


<span style="color: #728a05;">def</span> <span style="color: #2075c7;">login</span>():

    <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">Go to http://twitter.com/apps/new to create an app and get these items</span>
    <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">See also http://dev.twitter.com/pages/oauth_single_token</span>

    <span style="color: #2075c7;">APP_NAME</span> = <span style="color: #259185;">''</span>
    <span style="color: #2075c7;">CONSUMER_KEY</span> = <span style="color: #259185;">''</span>
    <span style="color: #2075c7;">CONSUMER_SECRET</span> = <span style="color: #259185;">''</span>
    <span style="color: #2075c7;">TOKEN_FILE</span> = <span style="color: #259185;">'out/twitter.oauth'</span>

    <span style="color: #728a05;">try</span>:
        (oauth_token, oauth_token_secret) = read_token_file(TOKEN_FILE)
    <span style="color: #728a05;">except</span> <span style="color: #a57705;">IOError</span>, e:
        (oauth_token, oauth_token_secret) = oauth_dance(APP_NAME, CONSUMER_KEY,
                CONSUMER_SECRET)

        <span style="color: #728a05;">if</span> <span style="color: #728a05;">not</span> os.path.isdir(<span style="color: #259185;">'out'</span>):
            os.mkdir(<span style="color: #259185;">'out'</span>)

        write_token_file(TOKEN_FILE, oauth_token, oauth_token_secret)

    <span style="color: #728a05;">return</span> twitter.Twitter(domain=<span style="color: #259185;">'api.twitter.com'</span>, api_version=<span style="color: #259185;">'1.1'</span>,
                        auth=twitter.oauth.OAuth(oauth_token, oauth_token_secret,
                        CONSUMER_KEY, CONSUMER_SECRET))

</pre>


</li>
</ul>
<ul>
<li id="sec-4-1-4-4">Python import statements<br/>




<pre class="src src-python"><span style="color: #728a05;">import</span> os
<span style="color: #728a05;">import</span> twitter

<span style="color: #728a05;">from</span> twitter.oauth <span style="color: #728a05;">import</span> write_token_file, read_token_file
<span style="color: #728a05;">from</span> twitter.oauth_dance <span style="color: #728a05;">import</span> oauth_dance
</pre>


<p>
We are using code from the <code>twitter</code> package
</p>
</li>
</ul>
<ul>
<li id="sec-4-1-4-5">Application name<br/>




<pre class="src src-python"><span style="color: #2075c7;">APP_NAME</span> = <span style="color: #259185;">''</span>
<span style="color: #2075c7;">CONSUMER_KEY</span> = <span style="color: #259185;">''</span>
<span style="color: #2075c7;">CONSUMER_SECRET</span> = <span style="color: #259185;">''</span>
<span style="color: #2075c7;">TOKEN_FILE</span> = <span style="color: #259185;">'out/twitter.oauth'</span>
</pre>


<ul class="org-ul">
<li>We're going to copy our consumer key from our app
</li>
<li><a href="https://dev.twitter.com/apps">https://dev.twitter.com/apps</a>
</li>
</ul>


</li>
</ul>
<ul>
<li id="sec-4-1-4-6">Returning our twitter object<br/>




<pre class="src src-python"><span style="color: #728a05;">try</span>:
    (oauth_token, oauth_token_secret) = read_token_file(TOKEN_FILE)
<span style="color: #728a05;">except</span> <span style="color: #a57705;">IOError</span>, e:
    (oauth_token, oauth_token_secret) = oauth_dance(APP_NAME, CONSUMER_KEY,
            CONSUMER_SECRET)

    <span style="color: #728a05;">if</span> <span style="color: #728a05;">not</span> os.path.isdir(<span style="color: #259185;">'out'</span>):
        os.mkdir(<span style="color: #259185;">'out'</span>)

    write_token_file(TOKEN_FILE, oauth_token, oauth_token_secret)

<span style="color: #728a05;">return</span> twitter.Twitter(domain=<span style="color: #259185;">'api.twitter.com'</span>, api_version=<span style="color: #259185;">'1.1'</span>,
                    auth=twitter.oauth.OAuth(oauth_token, oauth_token_secret,
                    CONSUMER_KEY, CONSUMER_SECRET))
</pre>


<ul class="org-ul">
<li><code>try</code> / <code>except</code> is a programming structure that attempts something,
  and does something if there's an error (rather than crashing your
  program)
</li>
<li>We will write the "token" to a file so we don't have to log in every
  time we need to do something
</li>
<li>We return a twitter object, which we will use to make API calls
</li>
<li><b>Note:</b> We are using API Version 1.1 - the code on github uses only
  version 1
</li>
</ul>


</li>
</ul>
<ul>
<li id="sec-4-1-4-7">What a login looks like<br/>
Save the modified file as <code>twitter__login.py</code>




<pre class="src src-python"><span style="color: #728a05;">import</span> twitter__login
<span style="color: #2075c7;">t</span> = twitter__login.login()
</pre>



<pre class="example">&gt;&gt;&gt; t = twitter__login.login()
Hi there! We're gonna get you all set up to use .

In the web browser window that opens please choose to Allow
access. Copy the PIN number that appears on the next page and paste or
type it here:

Opening: http://api.twitter.com/oauth/authorize?oauth_token=XXXXXXXXXXXXXXXX

Please enter the PIN: XXXXXXXX
</pre>


</li>
</ul>
</div>

</div>

<div id="outline-container-4-1-5" class="outline-4">
<h4 id="sec-4-1-5"><span class="section-number-4">4.1.5</span> Our first API Call</h4>
<div class="outline-text-4" id="text-4-1-5">





<pre class="src src-python"><span style="color: #728a05;">import</span> twitter__login
<span style="color: #2075c7;">t</span> = twitter__login.login()
<span style="color: #2075c7;">response</span> = t.users.show(screen_name=<span style="color: #259185;">'iqssrtc'</span>)
</pre>


<ul class="org-ul">
<li>Response here is a <code>WrappedTwitterResponse</code> object, basically a
  dictionary.
</li>
</ul>





<pre class="src src-python">response.keys()
</pre>




<pre class="example">[u'follow_request_sent', u'profile_use_background_image', u'time_zone', u'id', u'description', u'verified', u'entities', u'profile_image_url_https', u'profile_sidebar_fill_color', u'is_translator', u'geo_enabled', u'profile_text_color', u'followers_count', u'protected', u'id_str', u'default_profile_image', u'listed_count', u'status', u'utc_offset', u'statuses_count', u'profile_background_color', u'friends_count', u'profile_link_color', u'profile_image_url', u'notifications', u'profile_background_image_url_https', u'profile_background_image_url', u'name', u'lang', u'profile_background_tile', u'favourites_count', u'screen_name', u'url', u'created_at', u'contributors_enabled', u'location', u'profile_sidebar_border_color', u'default_profile', u'following']
</pre>


<ul class="org-ul">
<li>This is the collection of elements contained in the response
</li>
<li>To query them, treat it like a dict object
</li>
</ul>





<pre class="src src-python">response[<span style="color: #259185;">'location'</span>]
</pre>




<pre class="example">u'Cambridge, MA'
</pre>


</div>
</div>

</div>

<div id="outline-container-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> Search API</h3>
<div class="outline-text-3" id="text-4-2">


<blockquote>

<p>Please note that Twitter's search service and, by extension, the
Search API is not meant to be an exhaustive source of Tweets. Not all
Tweets will be indexed or made available via the search interface.
</p>
</blockquote>


<p>
   The search API is still useful primarily for getting recent events.
</p>
<p>
   If you need older tweets, the API provides them by way of querying
   a specific user.  
</p>
<p>
   You can also try using the older API version (until it is taken
   down)
</p>
<p>
   Due to time constraints, we are going to focus instead on the
   streaming API.  Detailed searches on historical twitter data must be
   obtained from a third-party provided at considerable cost.
</p>

</div>

<div id="outline-container-4-2-1" class="outline-4">
<h4 id="sec-4-2-1"><span class="section-number-4">4.2.1</span> Search API Usage</h4>
<div class="outline-text-4" id="text-4-2-1">




<pre class="src src-python"><span style="color: #728a05;">import</span> twitter
<span style="color: #728a05;">import</span> twitter__login

<span style="color: #2075c7;">t</span> = twitter__login.login()
<span style="color: #2075c7;">boston_res</span> = t.search.tweets(q=<span style="color: #259185;">"patriots"</span>,geocode=<span style="color: #259185;">"42.350425,-71.026611,50mi"</span>,count=100)
<span style="color: #2075c7;">baltimore_res</span> = t.search.tweets(q=<span style="color: #259185;">"patriots"</span>,geocode=<span style="color: #259185;">"39.291797,-76.59668,50mi"</span>,count=100)
</pre>


<p>
<b>Goal</b>: Evaluate whether tweets about the patriots are different in
New England than in Baltimore.
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">Option</th><th scope="col" class="left">Meaning</th></tr>
</thead>
<tbody>
<tr><td class="left">q</td><td class="left">The query itself</td></tr>
<tr><td class="left">geocode</td><td class="left">The location of the tweets: "lat,lon,#mi"</td></tr>
<tr><td class="left">count</td><td class="left">Results per page</td></tr>
</tbody>
</table>


<p>
<b>Full Documentation</b>: <a href="https://dev.twitter.com/docs/api/1.1/get/search/tweets">https://dev.twitter.com/docs/api/1.1/get/search/tweets</a>
</p>
</div>

</div>

<div id="outline-container-4-2-2" class="outline-4">
<h4 id="sec-4-2-2"><span class="section-number-4">4.2.2</span> Gnip and other services</h4>
<div class="outline-text-4" id="text-4-2-2">

<p>Twitter has partnered with other services to enable access to
historical tweets. Each of these services has their own API and their
own structure for handling rate limits, fees, etc.
</p>
</div>
</div>

</div>

<div id="outline-container-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> Streaming API</h3>
<div class="outline-text-3" id="text-4-3">


<ul class="org-ul">
<li>A continuous feed of twitter data
</li>
<li>Can be filtered by:
<ul class="org-ul">
<li>Location
</li>
<li>Content
</li>
<li>User
</li>
</ul>

</li>
</ul>


<blockquote>

<p>The default access level allows up to 400 track keywords, 5,000 follow
userids and 25 0.1-360 degree location boxes. If you need elevated
access to the Streaming API, you should explore our partner providers
of Twitter data here.
</p>
</blockquote>



</div>

<div id="outline-container-4-3-1" class="outline-4">
<h4 id="sec-4-3-1"><span class="section-number-4">4.3.1</span> Real-time search for "Obama"</h4>
<div class="outline-text-4" id="text-4-3-1">





<pre class="src src-python"><span style="color: #2075c7;">twitter_stream</span> = twitter.TwitterStream(auth=UserPassAuth(<span style="color: #259185;">'iqssrtc'</span>, <span style="color: #259185;">'*********'</span>))
<span style="color: #2075c7;">res</span> = twitter_stream.statuses.<span style="color: #728a05;">filter</span>(track=<span style="color: #259185;">'obama'</span>)
</pre>


<p>
Wait, didn't you just say that this is a bad way to do authentication?
</p>
<p>
Yes, it is.  You can make a dummy account just for this purpose.  Or,
you can modifiy the OAuth code from above to work here.
</p>



<pre class="src src-python"><span style="color: #2075c7;">reslist</span> = []

<span style="color: #2075c7;">tweetfields</span> = <span style="color: #728a05;">set</span>()

<span style="color: #728a05;">for</span> r <span style="color: #728a05;">in</span> res:
    <span style="color: #728a05;">if</span> <span style="color: #728a05;">len</span>(reslist)&lt;5000:
        <span style="color: #728a05;">print</span> <span style="color: #728a05;">len</span>(reslist)
        reslist.append(r)
        <span style="color: #2075c7;">tweetfields</span> = tweetfields.union(r.keys())
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">break</span>
</pre>


<p>
Each tweet has some metadata.  We are going to keep a list of all the
tweets (<code>reslist</code>) and then keep a running union of the metadata fields.
</p>
<p>
We stop when we reach 5000 tweets - we could keep going as long as we
have patientce and resources.
</p>



<pre class="src src-python"><span style="color: #2075c7;">fname</span> = <span style="color: #259185;">'/users/astorer/Work/presentations/twitter/example_tweets.csv'</span>
<span style="color: #2075c7;">f</span> = <span style="color: #728a05;">open</span>(fname,<span style="color: #259185;">'w'</span>)
<span style="color: #2075c7;">dw</span> = csv.DictWriter(f,fieldnames=<span style="color: #728a05;">list</span>(tweetfields))
dw.writeheader()

<span style="color: #728a05;">for</span> r <span style="color: #728a05;">in</span> reslist:
    dw.writerow({k:v.encode(<span style="color: #259185;">'utf8'</span>) <span style="color: #728a05;">if</span> <span style="color: #728a05;">isinstance</span>(v,<span style="color: #728a05;">unicode</span>) <span style="color: #728a05;">else</span> v <span style="color: #728a05;">for</span> k,v <span style="color: #728a05;">in</span> r.items()})    
f.close()
</pre>


<p>
We then write out (in unicode) each of the tweet fields to a single csv file.
</p>
</div>
</div>

</div>

<div id="outline-container-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> User graphs</h3>
<div class="outline-text-3" id="text-4-4">


<p>
<img src="iqssrtc_network_kamada.jpg"  alt="iqssrtc_network_kamada.jpg" />
</p>
<dl class="org-dl">
<dt><b>Circles</b></dt><dd>Twitter users
</dd>
<dt><b>Lines</b></dt><dd>Who follows/is followed by (notice the arrows)
</dd>
<dt><b>Color</b></dt><dd><a href="http://en.wikipedia.org/wiki/Betweenness_centrality">Betweenness Centrality</a> - how well connected is a node (in
             terms of shortest paths)
</dd>
</dl>


<hr/>

<ul class="org-ul">
<li>Twitter uses them to figure out
<ul class="org-ul">
<li>"Who to Follow"
</li>
<li>"Similar to”
</li>
<li>Search relevance

</li>
</ul>

</li>
<li>Social Scientists have used Network Analysis to
<ul class="org-ul">
<li>Determine whether isolation radicalizes Muslim clerics
</li>
<li>Evaluate health impacts of your social network
</li>
<li>Model the spread of information
</li>
</ul>

</li>
</ul>



</div>

<div id="outline-container-4-4-1" class="outline-4">
<h4 id="sec-4-4-1"><span class="section-number-4">4.4.1</span> Basic Idea</h4>
<div class="outline-text-4" id="text-4-4-1">


<p>
<b>Basic Idea</b>: Use Python to make API calls and process the results
</p>



<pre class="src src-python"><span style="color: #2075c7;">f0_in</span> = t.followers.ids(screen_name=<span style="color: #259185;">'iqssrtc'</span>)
</pre>




<pre class="example">{u'next_cursor_str': u'0', u'previous_cursor': 0, u'ids': [1016821495, 29354944, 56276556, 39276767, 41861503, 174223715, 16582606, 63513095, 1740171, 35323, 903628728, 18326200, 605934790, 320994155, 700975202, 603889619, 3319021, 202968305, 89079680, 109303284, 15344819, 140491706, 263947795, 223353896, 365653829, 39281968, 562122275, 81859001, 158494157, 108660744, 312791445, 7019992, 299894471], u'next_cursor': 0, u'previous_cursor_str': u'0'}
</pre>


<dl class="org-dl">
<dt><b>Cursor</b></dt><dd>Tells us where we are in the list of reponses (if we
              have &gt;5000 responses)
</dd>
<dt><b>IDs</b></dt><dd>Tells us the list of followers in this batch
</dd>
</dl>


</div>

</div>

<div id="outline-container-4-4-2" class="outline-4">
<h4 id="sec-4-4-2"><span class="section-number-4">4.4.2</span> Overview: The Details</h4>
<div class="outline-text-4" id="text-4-4-2">

<ul class="org-ul">
<li>We can only ask for the followers 15 times in 15 minutes.
<ul class="org-ul">
<li>We have to remember where we were
</li>
<li>We have to wait 15 minutes before trying more
</li>
<li>We have to save our progress in case anything goes wrong
</li>
<li>We have to have plenty of error handling (try/except)

</li>
</ul>

</li>
<li>Imagine that we have a <b>database</b> of users and their data
<ul class="org-ul">
<li>Before downloading, first check the database
</li>
<li>If not in the database, then collect the data spending an API call

</li>
</ul>

</li>
<li>Goal: maximum simplicity
<ul class="org-ul">
<li>Use a <code>dict</code> in python to store everything
<ul class="org-ul">
<li>keyed by the user ID
</li>
</ul>

</li>
<li>Write it to disk as a JSON
</li>
<li><b>Note</b>: If you're trying to store huge amounts of information,
    this is the wrong way to do it
</li>
</ul>

</li>
</ul>


</div>

</div>

<div id="outline-container-4-4-3" class="outline-4">
<h4 id="sec-4-4-3"><span class="section-number-4">4.4.3</span> Getting a user and all their friends and followers</h4>
<div class="outline-text-4" id="text-4-4-3">





<pre class="src src-python">d[user_id_str]
</pre>

<p>
<code>d</code> is a dictionary that will hold each user's information&hellip;in
another dictionary!  
</p>



<pre class="src src-python">d[user_id_str][<span style="color: #259185;">"followers"</span>]
</pre>

<p>
This will be a list of this user's followers.  We'll also have
<code>friends</code> (a list of people this user follows) and <code>details</code>, which
will contain the user's ID, screen name and other infomation provided
by twitter.
</p>



<pre class="src src-python">addUser(user_id,d,t)
</pre>


<p>
We will write a function <code>addUser</code>, which will take a user id, the
dictionary that stores our data and the twitter call.  We will assume
that this works, and plunge ahead!
</p>

<hr/>

<p>
To get a user's entire network, we are going to call <code>addUser</code> on the
user, as well as all of their friends and followers:
</p>



<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">crawlUser</span>(user_id,d,t):
    addUser(user_id,d,t)
    <span style="color: #2075c7;">user_id_str</span> = <span style="color: #728a05;">str</span>(user_id)    
    <span style="color: #728a05;">for</span> uid <span style="color: #728a05;">in</span> d[user_id_str][<span style="color: #259185;">"followers"</span>]:
        addUser(uid,d,t)
    <span style="color: #728a05;">for</span> uid <span style="color: #728a05;">in</span> d[user_id_str][<span style="color: #259185;">"friends"</span>]:
        addUser(uid,d,t)
</pre>


<p>
Notice that <code>crawlUser</code> expects a numeric user ID, but the dictionary
stores mappings from keys.  This is related to how we save our results
as we go.
</p>
</div>

</div>

<div id="outline-container-4-4-4" class="outline-4">
<h4 id="sec-4-4-4"><span class="section-number-4">4.4.4</span> Getting a user</h4>
<div class="outline-text-4" id="text-4-4-4">


<p>
To get everything we need about a user, we will need to&hellip;
</p>
<ol class="org-ol">
<li>Check if they are in the dictionary
   a. If so, do we have their "details"?
   b. If so, do we have their "followers"?
   c. If so, do we have their "friends"?
</li>
<li>If not, get their&hellip;
   a. "details"
   b. "followers"
   c. "friends"
</li>
</ol>


<p>
We will also save periodically (after roughly 1 out of 10 users)
</p>



<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">addUser</span>(user_id,d,t):
    <span style="color: #2075c7;">user_id_str</span> = <span style="color: #728a05;">str</span>(user_id)
    <span style="color: #728a05;">if</span> user_id_str <span style="color: #728a05;">in</span> d.keys():
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Already have user"</span>, user_id_str
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"details"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"details"</span>] = users_show(t,user_id=user_id)
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"followers"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"followers"</span>] = followers_ids(t,user_id=user_id)
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"friends"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"friends"</span>] = followers_ids(t,user_id=user_id)
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Downloading user"</span>, user_id_str        
        <span style="color: #2075c7;">userd</span> = <span style="color: #728a05;">dict</span>()
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"details"</span>] = users_show(t,user_id=user_id)
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"followers"</span>] = followers_ids(t,user_id=user_id)
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"friends"</span>] = friends_ids(t,user_id=user_id)
        <span style="color: #2075c7;">d</span>[user_id_str] = userd
    <span style="color: #728a05;">if</span> random.random()&gt;0.9:
        saveFile(d)
</pre>


</div>

</div>

<div id="outline-container-4-4-5" class="outline-4">
<h4 id="sec-4-4-5"><span class="section-number-4">4.4.5</span> Actually getting the information</h4>
<div class="outline-text-4" id="text-4-4-5">


<p>
We define wrapper functions for the calls to the Twitter API.  For
these to work, we must call the Twitter functions, handle any errors
that come back, and remember our place for the Twitter functions that
do not return all of their information at once.
</p>
<p>
This is called using a "cursor":
<a href="https://dev.twitter.com/docs/misc/cursoring">https://dev.twitter.com/docs/misc/cursoring</a>
</p>
<p>
In this function, we will handle both user id and screen name,
although it's easier to just use user ID, as that's what the twitter
API calls will all return.
</p>
<p>
The <code>next_cursor</code> is returned from the twitter API calls, so we can
just pass it to the next twitter API call if it indicates that there
is more data to collect.
</p>
<p>
The try/except framework lets us <code>try</code> a block of code, and if
something goes wrong, it will execute the <code>except</code> block.
</p>
<p>
We will have the specific twitter api errors handled by a separate
function.
</p>



<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">followers_ids</span>(t,user_id=<span style="color: #259185;">None</span>,screen_name=<span style="color: #259185;">None</span>,wait_period=2,cursor=-1):
    <span style="color: #728a05;">try</span>:
        <span style="color: #728a05;">if</span> user_id <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.followers.ids(user_id=user_id,cursor=cursor)
        <span style="color: #728a05;">elif</span> screen_name <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.followers.ids(screen_name=screen_name,cursor=cursor)
    <span style="color: #728a05;">except</span> twitter.api.TwitterHTTPError <span style="color: #728a05;">as</span> e:
        <span style="color: #2075c7;">wait_period</span> = handleTwitterHTTPError(e, t, wait_period)
        <span style="color: #728a05;">if</span> wait_period <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> followers_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=cursor)
        <span style="color: #728a05;">else</span>:
            <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>            
    <span style="color: #728a05;">if</span> result[<span style="color: #259185;">"next_cursor"</span>] != 0:
        <span style="color: #2075c7;">allids</span> = result[<span style="color: #259185;">'ids'</span>]
        <span style="color: #728a05;">return</span> allids+followers_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=result[<span style="color: #259185;">"next_cursor"</span>])
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">return</span> result[<span style="color: #259185;">'ids'</span>]
</pre>


<p>
This is just for <code>followers_ids</code>, but we also will have one for
<code>friends_ids</code> and <code>users_show</code>.  Remember, the full list of API calls
is available here:
</p>
<p>
<a href="https://dev.twitter.com/docs/api/1.1">https://dev.twitter.com/docs/api/1.1</a>
</p>
</div>

</div>

<div id="outline-container-4-4-6" class="outline-4">
<h4 id="sec-4-4-6"><span class="section-number-4">4.4.6</span> Error Handling</h4>
<div class="outline-text-4" id="text-4-4-6">





<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">handleTwitterHTTPError</span>(e, t, wait_period=2):
    <span style="color: #728a05;">if</span> e.e.code == 401:
        <span style="color: #728a05;">print</span> &gt;&gt; sys.stderr, <span style="color: #259185;">'Encountered 401 Error (Not Authorized)'</span>
        <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>        
    <span style="color: #728a05;">elif</span> e.e.code <span style="color: #728a05;">in</span> (502, 503):
        <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">these errors are Twitter's fault!</span>
        <span style="color: #728a05;">print</span> &gt;&gt; sys.stderr, <span style="color: #259185;">'Encountered %i Error. Will retry in %i seconds'</span> % (e.e.code,
                wait_period)
        time.sleep(wait_period)
        wait_period *= 1.5
        <span style="color: #728a05;">return</span> wait_period
    <span style="color: #728a05;">elif</span> e.e.code == 429:
        <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">you are being rate limited</span>
        <span style="color: #728a05;">print</span> <span style="color: #259185;">'Rate limiting.'</span>
        timer15()
        <span style="color: #728a05;">return</span> wait_period
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">raise</span> e
</pre>


<p>
The basic idea is that we will either be blocked from viewing
someone's information, twitter will have some "fail whale" type error,
or we will be rate limited.
</p>
<dl class="org-dl">
<dt><b>Rate Limiting</b></dt><dd>Wait 15 minutes, then try again
</dd>
<dt><b>Fail Whale</b></dt><dd>Wait longer than you waited last time (default: 2
                  seconds) then try again
</dd>
<dt><b>Not Authorized</b></dt><dd>Give up
</dd>
<dt><b>Anything Else</b></dt><dd>Give up and stop executing
</dd>
</dl>


</div>

</div>

<div id="outline-container-4-4-7" class="outline-4">
<h4 id="sec-4-4-7"><span class="section-number-4">4.4.7</span> Waiting</h4>
<div class="outline-text-4" id="text-4-4-7">

<p>We define a convenience function that waits 15 minutes and tells us
how long we've waited.
</p>



<pre class="src src-python"><span style="color: #728a05;">def</span> <span style="color: #2075c7;">timer15</span>():
    <span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> <span style="color: #728a05;">range</span>(1,16):
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Waiting minute"</span>, i, <span style="color: #259185;">"of 15"</span>
        time.sleep(60)
</pre>


</div>

</div>

<div id="outline-container-4-4-8" class="outline-4">
<h4 id="sec-4-4-8"><span class="section-number-4">4.4.8</span> The Entire Script</h4>
<div class="outline-text-4" id="text-4-4-8">





<pre class="src src-python"><span style="color: #728a05;">import</span> twitter
<span style="color: #728a05;">import</span> json
<span style="color: #728a05;">import</span> time
<span style="color: #728a05;">import</span> random
<span style="color: #728a05;">import</span> sys

<span style="color: #728a05;">import</span> twitter__login

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">timer15</span>():
    <span style="color: #728a05;">for</span> i <span style="color: #728a05;">in</span> <span style="color: #728a05;">range</span>(1,16):
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Waiting minute"</span>, i, <span style="color: #259185;">"of 15"</span>
        time.sleep(60)

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">crawlUser</span>(user_id,d,t):
    addUser(user_id,d,t)
    <span style="color: #2075c7;">user_id_str</span> = <span style="color: #728a05;">str</span>(user_id)    
    <span style="color: #728a05;">for</span> uid <span style="color: #728a05;">in</span> d[user_id_str][<span style="color: #259185;">"followers"</span>]:
        addUser(uid,d,t)
    <span style="color: #728a05;">for</span> uid <span style="color: #728a05;">in</span> d[user_id_str][<span style="color: #259185;">"friends"</span>]:
        addUser(uid,d,t)        

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">addUser</span>(user_id,d,t):
    <span style="color: #2075c7;">user_id_str</span> = <span style="color: #728a05;">str</span>(user_id)
    <span style="color: #728a05;">if</span> user_id_str <span style="color: #728a05;">in</span> d.keys():
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Already have user"</span>, user_id_str
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"details"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"details"</span>] = users_show(t,user_id=user_id)
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"followers"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"followers"</span>] = followers_ids(t,user_id=user_id)
        <span style="color: #728a05;">if</span> <span style="color: #259185;">"friends"</span> <span style="color: #728a05;">not</span> <span style="color: #728a05;">in</span> d[user_id_str].keys():
            d[user_id_str][<span style="color: #259185;">"friends"</span>] = followers_ids(t,user_id=user_id)
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">print</span> <span style="color: #259185;">"Downloading user"</span>, user_id_str        
        <span style="color: #2075c7;">userd</span> = <span style="color: #728a05;">dict</span>()
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"details"</span>] = users_show(t,user_id=user_id)
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"followers"</span>] = followers_ids(t,user_id=user_id)
        <span style="color: #2075c7;">userd</span>[<span style="color: #259185;">"friends"</span>] = friends_ids(t,user_id=user_id)
        <span style="color: #2075c7;">d</span>[user_id_str] = userd
    <span style="color: #728a05;">if</span> random.random()&gt;0.9:
        saveFile(d)


<span style="color: #728a05;">def</span> <span style="color: #2075c7;">users_show</span>(t,user_id=<span style="color: #259185;">None</span>,screen_name=<span style="color: #259185;">None</span>,wait_period=2):
    <span style="color: #728a05;">try</span>:
        <span style="color: #728a05;">if</span> user_id <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> t.users.show(user_id=user_id)
        <span style="color: #728a05;">elif</span> screen_name <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> t.users.show(screen_name=screen_name)
    <span style="color: #728a05;">except</span> twitter.api.TwitterHTTPError <span style="color: #728a05;">as</span> e:
        <span style="color: #2075c7;">wait_period</span> = handleTwitterHTTPError(e, t, wait_period)
        <span style="color: #728a05;">if</span> wait_period <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> users_show(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period)
        <span style="color: #728a05;">else</span>:
            <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">followers_ids</span>(t,user_id=<span style="color: #259185;">None</span>,screen_name=<span style="color: #259185;">None</span>,wait_period=2,cursor=-1):
    <span style="color: #728a05;">try</span>:
        <span style="color: #728a05;">if</span> user_id <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.followers.ids(user_id=user_id,cursor=cursor)
        <span style="color: #728a05;">elif</span> screen_name <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.followers.ids(screen_name=screen_name,cursor=cursor)
    <span style="color: #728a05;">except</span> twitter.api.TwitterHTTPError <span style="color: #728a05;">as</span> e:
        <span style="color: #2075c7;">wait_period</span> = handleTwitterHTTPError(e, t, wait_period)
        <span style="color: #728a05;">if</span> wait_period <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> followers_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=cursor)
        <span style="color: #728a05;">else</span>:
            <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>            
    <span style="color: #728a05;">if</span> result[<span style="color: #259185;">"next_cursor"</span>] != 0:
        <span style="color: #2075c7;">allids</span> = result[<span style="color: #259185;">'ids'</span>]
        <span style="color: #728a05;">return</span> allids+followers_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=result[<span style="color: #259185;">"next_cursor"</span>])
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">return</span> result[<span style="color: #259185;">'ids'</span>]

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">friends_ids</span>(t,user_id=<span style="color: #259185;">None</span>,screen_name=<span style="color: #259185;">None</span>,wait_period=2,cursor=-1):
    <span style="color: #728a05;">try</span>:
        <span style="color: #728a05;">if</span> user_id <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.friends.ids(user_id=user_id,cursor=cursor)
        <span style="color: #728a05;">elif</span> screen_name <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #2075c7;">result</span> = t.friends.ids(screen_name=screen_name,cursor=cursor)
    <span style="color: #728a05;">except</span> twitter.api.TwitterHTTPError <span style="color: #728a05;">as</span> e:
        <span style="color: #2075c7;">wait_period</span> = handleTwitterHTTPError(e, t, wait_period)
        <span style="color: #728a05;">if</span> wait_period <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">return</span> friends_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=cursor)
        <span style="color: #728a05;">else</span>:
            <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>
    <span style="color: #728a05;">if</span> result[<span style="color: #259185;">"next_cursor"</span>] != 0:
        <span style="color: #2075c7;">allids</span> = result[<span style="color: #259185;">'ids'</span>]
        <span style="color: #728a05;">return</span> allids+friends_ids(t,user_id=user_id,screen_name=screen_name,wait_period=wait_period,cursor=result[<span style="color: #259185;">"next_cursor"</span>])
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">return</span> result[<span style="color: #259185;">'ids'</span>]        

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">handleTwitterHTTPError</span>(e, t, wait_period=2):
    <span style="color: #728a05;">if</span> e.e.code == 401:
        <span style="color: #728a05;">print</span> &gt;&gt; sys.stderr, <span style="color: #259185;">'Encountered 401 Error (Not Authorized)'</span>
        <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>        
    <span style="color: #728a05;">elif</span> e.e.code <span style="color: #728a05;">in</span> (502, 503):
        <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">these errors are Twitter's fault!</span>
        <span style="color: #728a05;">print</span> &gt;&gt; sys.stderr, <span style="color: #259185;">'Encountered %i Error. Will retry in %i seconds'</span> % (e.e.code,
                wait_period)
        time.sleep(wait_period)
        wait_period *= 1.5
        <span style="color: #728a05;">return</span> wait_period
    <span style="color: #728a05;">elif</span> e.e.code == 429:
        <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">you are being rate limited</span>
        <span style="color: #728a05;">print</span> <span style="color: #259185;">'Rate limiting.'</span>
        timer15()
        <span style="color: #728a05;">return</span> wait_period
    <span style="color: #728a05;">else</span>:
        <span style="color: #728a05;">raise</span> e

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">getFile</span>(fname):
    <span style="color: #728a05;">try</span>:
        f = <span style="color: #728a05;">open</span>(fname)       
        d = json.load(f)
        f.close()
        <span style="color: #728a05;">return</span> d
    <span style="color: #728a05;">except</span>:
        <span style="color: #728a05;">return</span> <span style="color: #259185;">None</span>

<span style="color: #728a05;">def</span> <span style="color: #2075c7;">saveFile</span>(d):
    <span style="color: #728a05;">print</span> <span style="color: #259185;">"Saving!"</span>
    f = <span style="color: #728a05;">open</span>(d[<span style="color: #259185;">"fname"</span>],<span style="color: #259185;">'w'</span>)    
    json.dump(d,f)
    f.close()

t = twitter__login.login()
screen_name = <span style="color: #259185;">'iqssrtc'</span>
response = t.users.show(screen_name=screen_name)
user_id = response[<span style="color: #259185;">'id'</span>]

dname = screen_name+<span style="color: #259185;">'_net.json'</span>

d = getFile(dname)
<span style="color: #728a05;">if</span> d <span style="color: #728a05;">is</span> <span style="color: #259185;">None</span>:
    d = <span style="color: #728a05;">dict</span>()
    d[<span style="color: #259185;">"fname"</span>] = dname

crawlUser(user_id,d,t)
saveFile(d)
</pre>


</div>

</div>

<div id="outline-container-4-4-9" class="outline-4">
<h4 id="sec-4-4-9"><span class="section-number-4">4.4.9</span> Pitfalls</h4>
<div class="outline-text-4" id="text-4-4-9">

<ul class="org-ul">
<li>Barack Obama has 25,000,000 followers.  Downloading the entire list
  will take <b>2 months</b>
</li>
<li>Each added complexity takes more code, and takes more time to test
</li>
</ul>


</div>

</div>

<div id="outline-container-4-4-10" class="outline-4">
<h4 id="sec-4-4-10"><span class="section-number-4">4.4.10</span> Processing the Results</h4>
<div class="outline-text-4" id="text-4-4-10">

<p>Now that we've downloaded all of the twitter users and their data,
it's time to put things into a form that can be read by our graph
utilities in R.
</p>



<pre class="example">LizGentile,kinggary
LizGentile,IQSS
sisyphus00,HarvardLibrary
</pre>


<p>
The first column is the user, the second is who that user follows.
</p>
<p>
<b>Note</b>: If we include each user's connections to every other user,
 we will end up with a ton of users!  We will exclude users that
 aren't connected to our initial user in any way.
</p>
</div>

</div>

<div id="outline-container-4-4-11" class="outline-4">
<h4 id="sec-4-4-11"><span class="section-number-4">4.4.11</span> Script for processing</h4>
<div class="outline-text-4" id="text-4-4-11">

<ul>
<li id="sec-4-4-11-1">Load our saved results<br/>



<pre class="src src-python"><span style="color: #728a05;">import</span> json

<span style="color: #2075c7;">fname</span> = <span style="color: #259185;">"iqssrtc_net.json"</span>

<span style="color: #2075c7;">f</span> = <span style="color: #728a05;">open</span>(fname)       
<span style="color: #2075c7;">d</span> = json.load(f)
f.close()
</pre>


<p>
The <code>d</code> here is the same dictionary that we created in our earlier
script, which gives us all of the user information in contained
dictionaries.
</p>
</li>
</ul>
<ul>
<li id="sec-4-4-11-2">Make a way to connect usernames to screen names<br/>




<pre class="src src-python"><span style="color: #2075c7;">namelookup</span> = <span style="color: #728a05;">dict</span>()
<span style="color: #2075c7;">uidlookup</span> = <span style="color: #728a05;">dict</span>()

<span style="color: #728a05;">for</span> k <span style="color: #728a05;">in</span> d:
    <span style="color: #2075c7;">userd</span> = d[k]
    <span style="color: #728a05;">if</span> <span style="color: #728a05;">type</span>(userd) <span style="color: #728a05;">is</span> <span style="color: #728a05;">type</span>(<span style="color: #728a05;">dict</span>()):
        namelookup[userd[<span style="color: #259185;">'details'</span>][<span style="color: #259185;">'screen_name'</span>]] = <span style="color: #728a05;">str</span>(userd[<span style="color: #259185;">'details'</span>][<span style="color: #259185;">'id'</span>])
        uidlookup[<span style="color: #728a05;">str</span>(userd[<span style="color: #259185;">'details'</span>][<span style="color: #259185;">'id'</span>])] = <span style="color: #728a05;">str</span>(userd[<span style="color: #259185;">'details'</span>][<span style="color: #259185;">'screen_name'</span>])
</pre>


<p>
A dictionary only "points" in one direction - for convenience, we will
iterate through all of the users and make two separate dictionaries.
</p>
</li>
</ul>
<ul>
<li id="sec-4-4-11-3">Make the set of people connected to the first user<br/>




<pre class="src src-python"><span style="color: #2075c7;">adjset</span> = <span style="color: #728a05;">set</span>(d[namelookup[<span style="color: #259185;">'iqssrtc'</span>]][<span style="color: #259185;">"friends"</span>]+d[namelookup[<span style="color: #259185;">'iqssrtc'</span>]][<span style="color: #259185;">"followers"</span>])
</pre>


<p>
Sets can be "unioned" using the <code>+</code> operator.  We are going to put
together all of our friends and followers, and remove people from the
final output if they are connected to a connection, but not connected
to us.
</p>
</li>
</ul>
<ul>
<li id="sec-4-4-11-4">Add the connections to our master list if they are both in the set<br/>




<pre class="src src-python"><span style="color: #2075c7;">fw</span> = <span style="color: #728a05;">open</span>(<span style="color: #259185;">'iqssrtc_net.csv'</span>,<span style="color: #259185;">'w'</span>)

<span style="color: #728a05;">for</span> k <span style="color: #728a05;">in</span> d:
    <span style="color: #2075c7;">userd</span> = d[k]
    <span style="color: #728a05;">if</span> <span style="color: #728a05;">type</span>(userd) <span style="color: #728a05;">is</span> <span style="color: #728a05;">type</span>(<span style="color: #728a05;">dict</span>()):
        <span style="color: #728a05;">if</span> userd[<span style="color: #259185;">"followers"</span>] <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
            <span style="color: #728a05;">for</span> <span style="color: #728a05;">id</span> <span style="color: #728a05;">in</span> userd[<span style="color: #259185;">"followers"</span>]:
                <span style="color: #728a05;">if</span> <span style="color: #728a05;">id</span> <span style="color: #728a05;">in</span> adjset:
                    <span style="color: #2075c7;">source</span> = uidlookup[<span style="color: #728a05;">str</span>(<span style="color: #728a05;">id</span>)]
                    <span style="color: #2075c7;">dest</span> = uidlookup[k]
                    fw.write(source+<span style="color: #259185;">','</span>+dest+<span style="color: #259185;">'\n'</span>)
        <span style="color: #728a05;">if</span> userd[<span style="color: #259185;">"friends"</span>] <span style="color: #728a05;">is</span> <span style="color: #728a05;">not</span> <span style="color: #259185;">None</span>:
                <span style="color: #728a05;">for</span> <span style="color: #728a05;">id</span> <span style="color: #728a05;">in</span> userd[<span style="color: #259185;">"friends"</span>]:
                    <span style="color: #728a05;">if</span> <span style="color: #728a05;">id</span> <span style="color: #728a05;">in</span> adjset:
                        <span style="color: #2075c7;">dest</span> = uidlookup[<span style="color: #728a05;">str</span>(<span style="color: #728a05;">id</span>)]
                        <span style="color: #2075c7;">source</span> = uidlookup[k]
                        fw.write(source+<span style="color: #259185;">','</span>+dest+<span style="color: #259185;">'\n'</span>)

fw.close()
</pre>


<ul class="org-ul">
<li>Just use the operator <code>in</code> to check for presence in a set
</li>
<li>Then just write the <code>source,destination</code> pair to a file
</li>
</ul>






</li>
</ul>
</div>
</div>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Analyzing Data</h2>
<div class="outline-text-2" id="text-5">


</div>

<div id="outline-container-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Using R to make graphs</h3>
<div class="outline-text-3" id="text-5-1">


<p>
We finally have a file that contains the social network we wish to
graph!  Now, let's load it into R, set up some graphing packages and
visualize our network.
</p>

</div>

<div id="outline-container-5-1-1" class="outline-4">
<h4 id="sec-5-1-1"><span class="section-number-4">5.1.1</span> The <code>igraph</code> package</h4>
<div class="outline-text-4" id="text-5-1-1">


<p>
The <code>igraph</code> package is commonly used to display graphs and
compute some graph statistics.
</p>
<ul>
<li id="sec-5-1-1-1">Installation<br/>




<pre class="src src-R"></pre>



</li>
</ul>
</div>

</div>

<div id="outline-container-5-1-2" class="outline-4">
<h4 id="sec-5-1-2"><span class="section-number-4">5.1.2</span> Dangers</h4>
<div class="outline-text-4" id="text-5-1-2">

<ul class="org-ul">
<li>Graph elements are nodes and edges - node placement is <i>not</i>
  interpretable!
</li>
</ul>


</div>
</div>

</div>

<div id="outline-container-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> Basic Text Analysis</h3>
<div class="outline-text-3" id="text-5-2">


<p>
The most basic way to analyze text is with a "bag of words" model
</p><ul class="org-ul">
<li>No parts of speech are tagged
</li>
<li>Word order is not retained

</li>
<li>Read in your text and "tokenize" it
<ul class="org-ul">
<li>Input: "I am taking a Twitter workshop!"
</li>
<li>Possible Output: <code>[i][am][taking][a][twitter][workshop!]</code>
</li>
<li>Possible Output: <code>[taking][twitter][workshop]</code>
</li>
<li>Possible Output: <code>[i am][am taking][taking a][a twitter][twitter workshop]</code>

</li>
</ul>

</li>
<li>Create a Term-Document Matrix (TDM):
</li>
</ul>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col class="left" /><col class="right" /><col class="right" /><col class="right" /><col class="right" />
</colgroup>
<thead>
<tr><th scope="col" class="left"></th><th scope="col" class="right">Tale of Two Cities</th><th scope="col" class="right">Great Gatsby</th><th scope="col" class="right">The Tempest</th><th scope="col" class="right">1984</th></tr>
</thead>
<tbody>
<tr><td class="left">dog</td><td class="right">3</td><td class="right">5</td><td class="right">0</td><td class="right">2</td></tr>
<tr><td class="left">cat</td><td class="right">0</td><td class="right">2</td><td class="right">6</td><td class="right">1</td></tr>
<tr><td class="left">fish</td><td class="right">4</td><td class="right">2</td><td class="right">3</td><td class="right">8</td></tr>
<tr><td class="left">zebra</td><td class="right">0</td><td class="right">1</td><td class="right">0</td><td class="right">0</td></tr>
</tbody>
</table>


<ol class="org-ol">
<li>Use TDM as input to next analysis stage
</li>
</ol>


</div>

</div>

<div id="outline-container-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> Tools for Text Analysis in R</h3>
<div class="outline-text-3" id="text-5-3">


<p>
There are so many!
</p>
<p>
<a href="http://cran.r-project.org/web/views/NaturalLanguageProcessing.html">http://cran.r-project.org/web/views/NaturalLanguageProcessing.html</a>
</p>
<p>
Many of them are based on the <code>tm</code> package
</p>
</div>

</div>

<div id="outline-container-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> Word correlation</h3>
<div class="outline-text-3" id="text-5-4">


<p>
Let's take a look at our tweet content in R using the <code>tm</code> package.
Begin by installing the required packages:
</p>


<pre class="src src-R">install.packages(<span style="color: #259185;">'tm'</span>)
install.packages(<span style="color: #259185;">'RWeka'</span>)
<span style="color: #259185;">source</span>(<span style="color: #259185;">"http://bioconductor.org/biocLite.R"</span>)
biocLite(<span style="color: #259185;">"Rgraphviz"</span>)  
</pre>



<pre class="src src-R"><span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">This line appears necessary for some Macs to interact with Java</span>
Sys.setenv(NOAWT=<span style="color: #a57705;">TRUE</span>)

<span style="color: #259185;">library</span>(tm) 
<span style="color: #259185;">library</span>(RWeka) 
<span style="color: #259185;">library</span>(Rgraphviz)

<span style="color: #2075c7;">readvanilla</span> <span style="color: #259185;">&lt;-</span> <span style="color: #728a05;">function</span> (elem, language, id) 
{
  <span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">ideally, add in metadata for each piece of lexisnexis</span>
  doc <span style="color: #259185;">&lt;-</span> PlainTextDocument(elem$content, id = id, language = language)
}

<span style="color: #81908f; font-style: italic;"># </span><span style="color: #81908f; font-style: italic;">Set the path to the location of the tweets</span>
tweets <span style="color: #259185;">&lt;-</span> read.csv(<span style="color: #259185;">'/Users/astorer/Work/presentations/twitter/example_tweets.csv'</span>)
corpus <span style="color: #259185;">&lt;-</span> Corpus(VectorSource(tweets$text),readerControl=list(reader = readvanilla))  

Sys.setlocale(<span style="color: #259185;">"LC_COLLATE"</span>, <span style="color: #259185;">"C"</span>)

dtm <span style="color: #259185;">&lt;-</span> DocumentTermMatrix(corpus, control = list(stemming = <span style="color: #a57705;">FALSE</span>,
                                                 tokenize = WordTokenizer,
                                                 stopwords = <span style="color: #a57705;">TRUE</span>, 
                                                 minWordLength = 3,
                                                 removeNumbers = <span style="color: #a57705;">TRUE</span>, 
                                                 removePunctuation = <span style="color: #a57705;">TRUE</span>))
dim(dtm)   
ft <span style="color: #259185;">&lt;-</span> findFreqTerms(dtm, lowfreq = 150, highfreq = 500)  
plot(dtm, terms = ft, corThreshold = 0.05)  
</pre>


<p>
<img src="wordcor.png"  alt="wordcor.png" />
</p>
</div>
</div>
</div>
</div>

<div id="postamble">
<p class="date">Date: January, 2013</p>
<p class="author">Author: Alex Storer</p>
<a href="http://validator.w3.org/check?uri=referer">Validate XHTML 1.0</a>

</div>
</body>
</html>
